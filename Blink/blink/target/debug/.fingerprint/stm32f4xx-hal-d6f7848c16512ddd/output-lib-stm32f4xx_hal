{"$message_type":"diagnostic","message":"unresolved import `embedded_hal_one::digital::blocking`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":239,"byte_end":247,"line_start":10,"line_end":10,"column_start":5,"column_end":13,"is_primary":true,"text":[{"text":"    blocking::{InputPin, IoPin, OutputPin, StatefulOutputPin, ToggleableOutputPin},","highlight_start":5,"highlight_end":13}],"label":"could not find `blocking` in `digital`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unresolved import `embedded_hal_one::digital::blocking`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:10:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    blocking::{InputPin, IoPin, OutputPin, StatefulOutputPin, ToggleableOutputPin},\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `blocking` in `digital`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `embedded_hal_one::i2c::blocking`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":641,"byte_end":649,"line_start":21,"line_end":21,"column_start":32,"column_end":40,"is_primary":true,"text":[{"text":"    use embedded_hal_one::i2c::blocking::Operation;","highlight_start":32,"highlight_end":40}],"label":"could not find `blocking` in `i2c`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unresolved import `embedded_hal_one::i2c::blocking`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs:21:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m21\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use embedded_hal_one::i2c::blocking::Operation;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `blocking` in `i2c`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: could not find `serial` in `embedded_hal_one`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":423,"byte_end":429,"line_start":17,"line_end":17,"column_start":27,"column_end":33,"is_primary":true,"text":[{"text":"    use embedded_hal_one::serial::{","highlight_start":27,"highlight_end":33}],"label":"could not find `serial` in `embedded_hal_one`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: failed to resolve: could not find `serial` in `embedded_hal_one`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs:17:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use embedded_hal_one::serial::{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `serial` in `embedded_hal_one`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `embedded_hal_one::serial`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":22,"byte_end":28,"line_start":1,"line_end":1,"column_start":23,"column_end":29,"is_primary":true,"text":[{"text":"use embedded_hal_one::serial::ErrorType;","highlight_start":23,"highlight_end":29}],"label":"could not find `serial` in `embedded_hal_one`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unresolved import `embedded_hal_one::serial`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs:1:23\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse embedded_hal_one::serial::ErrorType;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `serial` in `embedded_hal_one`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: could not find `serial` in `embedded_hal_one`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":2803,"byte_end":2809,"line_start":92,"line_end":92,"column_start":27,"column_end":33,"is_primary":true,"text":[{"text":"    use embedded_hal_one::serial::blocking::Write;","highlight_start":27,"highlight_end":33}],"label":"could not find `serial` in `embedded_hal_one`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: failed to resolve: could not find `serial` in `embedded_hal_one`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs:92:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m92\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use embedded_hal_one::serial::blocking::Write;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `serial` in `embedded_hal_one`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `embedded_hal_one::serial`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":423,"byte_end":429,"line_start":17,"line_end":17,"column_start":27,"column_end":33,"is_primary":true,"text":[{"text":"    use embedded_hal_one::serial::{","highlight_start":27,"highlight_end":33}],"label":"could not find `serial` in `embedded_hal_one`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unresolved import `embedded_hal_one::serial`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs:17:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use embedded_hal_one::serial::{\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `serial` in `embedded_hal_one`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `embedded_hal_one::serial`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial.rs","byte_start":1121,"byte_end":1127,"line_start":38,"line_end":38,"column_start":27,"column_end":33,"is_primary":true,"text":[{"text":"pub use embedded_hal_one::serial::ErrorKind as Error;","highlight_start":27,"highlight_end":33}],"label":"could not find `serial` in `embedded_hal_one`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unresolved import `embedded_hal_one::serial`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial.rs:38:27\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m38\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub use embedded_hal_one::serial::ErrorKind as Error;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `serial` in `embedded_hal_one`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `embedded_hal_one::spi::nb`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":1229,"byte_end":1231,"line_start":46,"line_end":46,"column_start":32,"column_end":34,"is_primary":true,"text":[{"text":"    use embedded_hal_one::spi::nb::FullDuplex;","highlight_start":32,"highlight_end":34}],"label":"could not find `nb` in `spi`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unresolved import `embedded_hal_one::spi::nb`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs:46:32\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m46\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use embedded_hal_one::spi::nb::FullDuplex;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `nb` in `spi`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved imports `embedded_hal_one::spi::blocking`, `embedded_hal_one::spi::nb`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":2160,"byte_end":2168,"line_start":80,"line_end":80,"column_start":9,"column_end":17,"is_primary":true,"text":[{"text":"        blocking::{Operation, Transactional, TransferInplace, Write, WriteIter},","highlight_start":9,"highlight_end":17}],"label":"could not find `blocking` in `spi`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":2241,"byte_end":2243,"line_start":81,"line_end":81,"column_start":9,"column_end":11,"is_primary":true,"text":[{"text":"        nb::FullDuplex,","highlight_start":9,"highlight_end":11}],"label":"could not find `nb` in `spi`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unresolved imports `embedded_hal_one::spi::blocking`, `embedded_hal_one::spi::nb`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs:80:9\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m80\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        blocking::{Operation, Transactional, TransferInplace, Write, WriteIter},\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `blocking` in `spi`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m81\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        nb::FullDuplex,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `nb` in `spi`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unresolved import `embedded_hal_one::delay::blocking`","code":{"code":"E0432","explanation":"An import was unresolved.\n\nErroneous code example:\n\n```compile_fail,E0432\nuse something::Foo; // error: unresolved import `something::Foo`.\n```\n\nIn Rust 2015, paths in `use` statements are relative to the crate root. To\nimport items relative to the current and parent modules, use the `self::` and\n`super::` prefixes, respectively.\n\nIn Rust 2018 or later, paths in `use` statements are relative to the current\nmodule unless they begin with the name of a crate or a literal `crate::`, in\nwhich case they start from the crate root. As in Rust 2015 code, the `self::`\nand `super::` prefixes refer to the current and parent modules respectively.\n\nAlso verify that you didn't misspell the import name and that the import exists\nin the module from where you tried to import it. Example:\n\n```\nuse self::something::Foo; // Ok.\n\nmod something {\n    pub struct Foo;\n}\n# fn main() {}\n```\n\nIf you tried to use a module from an external crate and are using Rust 2015,\nyou may have missed the `extern crate` declaration (which is usually placed in\nthe crate root):\n\n```edition2015\nextern crate core; // Required to use the `core` crate in Rust 2015.\n\nuse core::any;\n# fn main() {}\n```\n\nSince Rust 2018 the `extern crate` declaration is not required and\nyou can instead just `use` it:\n\n```edition2018\nuse core::any; // No extern crate required in Rust 2018.\n# fn main() {}\n```\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\timer\\hal_1.rs","byte_start":260,"byte_end":268,"line_start":7,"line_end":7,"column_start":30,"column_end":38,"is_primary":true,"text":[{"text":"use embedded_hal_one::delay::blocking::DelayUs;","highlight_start":30,"highlight_end":38}],"label":"could not find `blocking` in `delay`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0432]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unresolved import `embedded_hal_one::delay::blocking`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\timer\\hal_1.rs:7:30\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m7\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse embedded_hal_one::delay::blocking::DelayUs;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `blocking` in `delay`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: could not find `adc` in `embedded_hal_one`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\adc.rs","byte_start":41607,"byte_end":41610,"line_start":1078,"line_end":1078,"column_start":41,"column_end":44,"is_primary":true,"text":[{"text":"            impl<PIN> embedded_hal_one::adc::nb::OneShot<pac::$adc_type, u16, PIN> for Adc<pac::$adc_type>","highlight_start":41,"highlight_end":44}],"label":"could not find `adc` in `embedded_hal_one`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\adc.rs","byte_start":42316,"byte_end":42351,"line_start":1101,"line_end":1101,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"adc!(ADC1 => (adc1, ADC_COMMON, 8));","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"adc!","def_site_span":{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\adc.rs","byte_start":20205,"byte_end":20221,"line_start":642,"line_end":642,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"macro_rules! adc {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: failed to resolve: could not find `adc` in `embedded_hal_one`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\adc.rs:1078:41\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1078\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m            impl<PIN> embedded_hal_one::adc::nb::OneShot<pac::$adc_type, u16, PIN> for Adc<pac::$adc_type>\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `adc` in `embedded_hal_one`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madc!(ADC1 => (adc1, ADC_COMMON, 8));\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `adc` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: could not find `adc` in `embedded_hal_one`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\adc.rs","byte_start":41783,"byte_end":41786,"line_start":1080,"line_end":1080,"column_start":92,"column_end":95,"is_primary":true,"text":[{"text":"                PIN: embedded_hal::adc::Channel<pac::$adc_type, ID=u8> + embedded_hal_one::adc::nb::Channel<pac::$adc_type, ID=u8>,","highlight_start":92,"highlight_end":95}],"label":"could not find `adc` in `embedded_hal_one`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\adc.rs","byte_start":42316,"byte_end":42351,"line_start":1101,"line_end":1101,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"adc!(ADC1 => (adc1, ADC_COMMON, 8));","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"adc!","def_site_span":{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\adc.rs","byte_start":20205,"byte_end":20221,"line_start":642,"line_end":642,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"macro_rules! adc {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: failed to resolve: could not find `adc` in `embedded_hal_one`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\adc.rs:1080:92\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1080\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                PIN: embedded_hal::adc::Channel<pac::$adc_type, ID=u8> + embedded_hal_one::adc::nb::Channel<pac::$adc_type,\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `adc` in `embedded_hal_one`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madc!(ADC1 => (adc1, ADC_COMMON, 8));\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `adc` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: could not find `adc` in `embedded_hal_one`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\adc.rs","byte_start":1109,"byte_end":1112,"line_start":38,"line_end":38,"column_start":36,"column_end":39,"is_primary":true,"text":[{"text":"            impl embedded_hal_one::adc::nb::Channel<pac::$adc> for $pin {","highlight_start":36,"highlight_end":39}],"label":"could not find `adc` in `embedded_hal_one`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\adc.rs","byte_start":42511,"byte_end":42962,"line_start":1110,"line_end":1124,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"adc_pins!(","highlight_start":1,"highlight_end":11},{"text":"    gpio::PA0<Analog> => (ADC1, 0),","highlight_start":1,"highlight_end":36},{"text":"    gpio::PA1<Analog> => (ADC1, 1),","highlight_start":1,"highlight_end":36},{"text":"    gpio::PA2<Analog> => (ADC1, 2),","highlight_start":1,"highlight_end":36},{"text":"    gpio::PA3<Analog> => (ADC1, 3),","highlight_start":1,"highlight_end":36},{"text":"    gpio::PA4<Analog> => (ADC1, 4),","highlight_start":1,"highlight_end":36},{"text":"    gpio::PA5<Analog> => (ADC1, 5),","highlight_start":1,"highlight_end":36},{"text":"    gpio::PA6<Analog> => (ADC1, 6),","highlight_start":1,"highlight_end":36},{"text":"    gpio::PA7<Analog> => (ADC1, 7),","highlight_start":1,"highlight_end":36},{"text":"    gpio::PB0<Analog> => (ADC1, 8),","highlight_start":1,"highlight_end":36},{"text":"    gpio::PB1<Analog> => (ADC1, 9),","highlight_start":1,"highlight_end":36},{"text":"    Temperature => (ADC1, 18),","highlight_start":1,"highlight_end":31},{"text":"    Vbat => (ADC1, 18),","highlight_start":1,"highlight_end":24},{"text":"    Vref => (ADC1, 17),","highlight_start":1,"highlight_end":24},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"adc_pins!","def_site_span":{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\adc.rs","byte_start":825,"byte_end":846,"line_start":30,"line_end":30,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! adc_pins {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: failed to resolve: could not find `adc` in `embedded_hal_one`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\adc.rs:38:36\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m38\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            impl embedded_hal_one::adc::nb::Channel<pac::$adc> for $pin {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `adc` in `embedded_hal_one`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1110\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0madc_pins!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1111\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    gpio::PA0<Analog> => (ADC1, 0),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    gpio::PA1<Analog> => (ADC1, 1),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1113\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    gpio::PA2<Analog> => (ADC1, 2),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1123\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Vref => (ADC1, 17),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `adc_pins` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: could not find `adc` in `embedded_hal_one`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\adc.rs","byte_start":1109,"byte_end":1112,"line_start":38,"line_end":38,"column_start":36,"column_end":39,"is_primary":true,"text":[{"text":"            impl embedded_hal_one::adc::nb::Channel<pac::$adc> for $pin {","highlight_start":36,"highlight_end":39}],"label":"could not find `adc` in `embedded_hal_one`","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\adc.rs","byte_start":43025,"byte_end":43259,"line_start":1128,"line_end":1135,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"adc_pins!(","highlight_start":1,"highlight_end":11},{"text":"    gpio::PC0<Analog> => (ADC1, 10),","highlight_start":1,"highlight_end":37},{"text":"    gpio::PC1<Analog> => (ADC1, 11),","highlight_start":1,"highlight_end":37},{"text":"    gpio::PC2<Analog> => (ADC1, 12),","highlight_start":1,"highlight_end":37},{"text":"    gpio::PC3<Analog> => (ADC1, 13),","highlight_start":1,"highlight_end":37},{"text":"    gpio::PC4<Analog> => (ADC1, 14),","highlight_start":1,"highlight_end":37},{"text":"    gpio::PC5<Analog> => (ADC1, 15),","highlight_start":1,"highlight_end":37},{"text":");","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"adc_pins!","def_site_span":{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\adc.rs","byte_start":825,"byte_end":846,"line_start":30,"line_end":30,"column_start":1,"column_end":22,"is_primary":false,"text":[{"text":"macro_rules! adc_pins {","highlight_start":1,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: failed to resolve: could not find `adc` in `embedded_hal_one`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\adc.rs:38:36\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m38\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m   \u001b[0m\u001b[0m            impl embedded_hal_one::adc::nb::Channel<pac::$adc> for $pin {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `adc` in `embedded_hal_one`\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1128\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0madc_pins!(\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1129\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    gpio::PC0<Analog> => (ADC1, 10),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1130\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    gpio::PC1<Analog> => (ADC1, 11),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1131\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    gpio::PC2<Analog> => (ADC1, 12),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1134\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    gpio::PC5<Analog> => (ADC1, 15),\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1135\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `adc_pins` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: could not find `blocking` in `i2c`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":716,"byte_end":724,"line_start":23,"line_end":23,"column_start":54,"column_end":62,"is_primary":true,"text":[{"text":"    impl<I2C: Instance, PINS> embedded_hal_one::i2c::blocking::I2c for I2c<I2C, PINS> {","highlight_start":54,"highlight_end":62}],"label":"could not find `blocking` in `i2c`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: failed to resolve: could not find `blocking` in `i2c`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs:23:54\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m23\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    impl<I2C: Instance, PINS> embedded_hal_one::i2c::blocking::I2c for I2c<I2C, PINS> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `blocking` in `i2c`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"failed to resolve: could not find `blocking` in `delay`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\dwt.rs","byte_start":3917,"byte_end":3925,"line_start":117,"line_end":117,"column_start":31,"column_end":39,"is_primary":true,"text":[{"text":"impl embedded_hal_one::delay::blocking::DelayUs for Delay {","highlight_start":31,"highlight_end":39}],"label":"could not find `blocking` in `delay`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: failed to resolve: could not find `blocking` in `delay`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\dwt.rs:117:31\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mimpl embedded_hal_one::delay::blocking::DelayUs for Delay {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mcould not find `blocking` in `delay`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\adc.rs","byte_start":41941,"byte_end":41952,"line_start":1084,"line_end":1084,"column_start":70,"column_end":81,"is_primary":true,"text":[{"text":"                fn read(&mut self, pin: &mut PIN) -> nb::Result<u16, Self::Error> {","highlight_start":70,"highlight_end":81}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\adc.rs","byte_start":42316,"byte_end":42351,"line_start":1101,"line_end":1101,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"adc!(ADC1 => (adc1, ADC_COMMON, 8));","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"adc!","def_site_span":{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\adc.rs","byte_start":20205,"byte_end":20221,"line_start":642,"line_end":642,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"macro_rules! adc {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[{"message":"if there were a trait named `Example` with associated type `Error` implemented for `Adc<ADC1>`, you could use the fully-qualified path","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\adc.rs","byte_start":41941,"byte_end":41952,"line_start":1084,"line_end":1084,"column_start":70,"column_end":81,"is_primary":true,"text":[{"text":"                fn read(&mut self, pin: &mut PIN) -> nb::Result<u16, Self::Error> {","highlight_start":70,"highlight_end":81}],"label":null,"suggested_replacement":"<Adc<ADC1> as Example>::Error","suggestion_applicability":"HasPlaceholders","expansion":{"span":{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\adc.rs","byte_start":42316,"byte_end":42351,"line_start":1101,"line_end":1101,"column_start":1,"column_end":36,"is_primary":false,"text":[{"text":"adc!(ADC1 => (adc1, ADC_COMMON, 8));","highlight_start":1,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"adc!","def_site_span":{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\adc.rs","byte_start":20205,"byte_end":20221,"line_start":642,"line_end":642,"column_start":1,"column_end":17,"is_primary":false,"text":[{"text":"macro_rules! adc {","highlight_start":1,"highlight_end":17}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\adc.rs:1084:70\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1084\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                fn read(&mut self, pin: &mut PIN) -> nb::Result<u16, Self::Error> {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1101\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0madc!(ADC1 => (adc1, ADC_COMMON, 8));\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m-----------------------------------\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14min this macro invocation\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: this error originates in the macro `adc` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: if there were a trait named `Example` with associated type `Error` implemented for `Adc<ADC1>`, you could use the fully-qualified path\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1084\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                fn read(&mut self, pin: &mut PIN) -> nb::Result<u16, \u001b[0m\u001b[0m\u001b[38;5;10m<Adc<ADC1> as Example>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                      \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":787,"byte_end":798,"line_start":28,"line_end":28,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn set_high(&mut self) -> Result<(), Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":787,"byte_end":798,"line_start":28,"line_end":28,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn set_high(&mut self) -> Result<(), Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":787,"byte_end":798,"line_start":28,"line_end":28,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn set_high(&mut self) -> Result<(), Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":787,"byte_end":798,"line_start":28,"line_end":28,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn set_high(&mut self) -> Result<(), Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":787,"byte_end":798,"line_start":28,"line_end":28,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn set_high(&mut self) -> Result<(), Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":787,"byte_end":798,"line_start":28,"line_end":28,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn set_high(&mut self) -> Result<(), Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":787,"byte_end":798,"line_start":28,"line_end":28,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn set_high(&mut self) -> Result<(), Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":787,"byte_end":798,"line_start":28,"line_end":28,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn set_high(&mut self) -> Result<(), Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":787,"byte_end":798,"line_start":28,"line_end":28,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn set_high(&mut self) -> Result<(), Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":787,"byte_end":798,"line_start":28,"line_end":28,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn set_high(&mut self) -> Result<(), Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":787,"byte_end":798,"line_start":28,"line_end":28,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn set_high(&mut self) -> Result<(), Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:28:42\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn set_high(&mut self) -> Result<(), Self::Error> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn set_high(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<MODE>, P, N> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn set_high(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<MODE>, P, N> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn set_high(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<MODE>, P, N> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn set_high(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<MODE>, P, N> as _embedded_hal_blocking_spi_Transfer>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m     and 6 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":911,"byte_end":922,"line_start":34,"line_end":34,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"    fn set_low(&mut self) -> Result<(), Self::Error> {","highlight_start":41,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":911,"byte_end":922,"line_start":34,"line_end":34,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"    fn set_low(&mut self) -> Result<(), Self::Error> {","highlight_start":41,"highlight_end":52}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":911,"byte_end":922,"line_start":34,"line_end":34,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"    fn set_low(&mut self) -> Result<(), Self::Error> {","highlight_start":41,"highlight_end":52}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":911,"byte_end":922,"line_start":34,"line_end":34,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"    fn set_low(&mut self) -> Result<(), Self::Error> {","highlight_start":41,"highlight_end":52}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":911,"byte_end":922,"line_start":34,"line_end":34,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"    fn set_low(&mut self) -> Result<(), Self::Error> {","highlight_start":41,"highlight_end":52}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":911,"byte_end":922,"line_start":34,"line_end":34,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"    fn set_low(&mut self) -> Result<(), Self::Error> {","highlight_start":41,"highlight_end":52}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":911,"byte_end":922,"line_start":34,"line_end":34,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"    fn set_low(&mut self) -> Result<(), Self::Error> {","highlight_start":41,"highlight_end":52}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":911,"byte_end":922,"line_start":34,"line_end":34,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"    fn set_low(&mut self) -> Result<(), Self::Error> {","highlight_start":41,"highlight_end":52}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":911,"byte_end":922,"line_start":34,"line_end":34,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"    fn set_low(&mut self) -> Result<(), Self::Error> {","highlight_start":41,"highlight_end":52}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":911,"byte_end":922,"line_start":34,"line_end":34,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"    fn set_low(&mut self) -> Result<(), Self::Error> {","highlight_start":41,"highlight_end":52}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":911,"byte_end":922,"line_start":34,"line_end":34,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"    fn set_low(&mut self) -> Result<(), Self::Error> {","highlight_start":41,"highlight_end":52}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:34:41\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn set_low(&mut self) -> Result<(), Self::Error> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn set_low(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<MODE>, P, N> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn set_low(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<MODE>, P, N> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn set_low(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<MODE>, P, N> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn set_low(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<MODE>, P, N> as _embedded_hal_blocking_spi_Transfer>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m     and 6 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1125,"byte_end":1136,"line_start":42,"line_end":42,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"    fn is_set_high(&self) -> Result<bool, Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1125,"byte_end":1136,"line_start":42,"line_end":42,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"    fn is_set_high(&self) -> Result<bool, Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1125,"byte_end":1136,"line_start":42,"line_end":42,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"    fn is_set_high(&self) -> Result<bool, Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1125,"byte_end":1136,"line_start":42,"line_end":42,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"    fn is_set_high(&self) -> Result<bool, Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1125,"byte_end":1136,"line_start":42,"line_end":42,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"    fn is_set_high(&self) -> Result<bool, Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1125,"byte_end":1136,"line_start":42,"line_end":42,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"    fn is_set_high(&self) -> Result<bool, Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1125,"byte_end":1136,"line_start":42,"line_end":42,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"    fn is_set_high(&self) -> Result<bool, Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1125,"byte_end":1136,"line_start":42,"line_end":42,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"    fn is_set_high(&self) -> Result<bool, Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1125,"byte_end":1136,"line_start":42,"line_end":42,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"    fn is_set_high(&self) -> Result<bool, Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1125,"byte_end":1136,"line_start":42,"line_end":42,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"    fn is_set_high(&self) -> Result<bool, Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1125,"byte_end":1136,"line_start":42,"line_end":42,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"    fn is_set_high(&self) -> Result<bool, Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:42:43\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn is_set_high(&self) -> Result<bool, Self::Error> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_set_high(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<MODE>, P, N> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_set_high(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<MODE>, P, N> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_set_high(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<MODE>, P, N> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m42\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_set_high(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<MODE>, P, N> as _embedded_hal_blocking_spi_Transfer>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m     and 6 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1241,"byte_end":1252,"line_start":47,"line_end":47,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn is_set_low(&self) -> Result<bool, Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1241,"byte_end":1252,"line_start":47,"line_end":47,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn is_set_low(&self) -> Result<bool, Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1241,"byte_end":1252,"line_start":47,"line_end":47,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn is_set_low(&self) -> Result<bool, Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1241,"byte_end":1252,"line_start":47,"line_end":47,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn is_set_low(&self) -> Result<bool, Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1241,"byte_end":1252,"line_start":47,"line_end":47,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn is_set_low(&self) -> Result<bool, Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1241,"byte_end":1252,"line_start":47,"line_end":47,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn is_set_low(&self) -> Result<bool, Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1241,"byte_end":1252,"line_start":47,"line_end":47,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn is_set_low(&self) -> Result<bool, Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1241,"byte_end":1252,"line_start":47,"line_end":47,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn is_set_low(&self) -> Result<bool, Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1241,"byte_end":1252,"line_start":47,"line_end":47,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn is_set_low(&self) -> Result<bool, Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1241,"byte_end":1252,"line_start":47,"line_end":47,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn is_set_low(&self) -> Result<bool, Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1241,"byte_end":1252,"line_start":47,"line_end":47,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn is_set_low(&self) -> Result<bool, Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:47:42\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn is_set_low(&self) -> Result<bool, Self::Error> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_set_low(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<MODE>, P, N> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_set_low(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<MODE>, P, N> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_set_low(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<MODE>, P, N> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m47\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_set_low(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<MODE>, P, N> as _embedded_hal_blocking_spi_Transfer>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m     and 6 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1445,"byte_end":1456,"line_start":54,"line_end":54,"column_start":40,"column_end":51,"is_primary":true,"text":[{"text":"    fn toggle(&mut self) -> Result<(), Self::Error> {","highlight_start":40,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1445,"byte_end":1456,"line_start":54,"line_end":54,"column_start":40,"column_end":51,"is_primary":true,"text":[{"text":"    fn toggle(&mut self) -> Result<(), Self::Error> {","highlight_start":40,"highlight_end":51}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1445,"byte_end":1456,"line_start":54,"line_end":54,"column_start":40,"column_end":51,"is_primary":true,"text":[{"text":"    fn toggle(&mut self) -> Result<(), Self::Error> {","highlight_start":40,"highlight_end":51}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1445,"byte_end":1456,"line_start":54,"line_end":54,"column_start":40,"column_end":51,"is_primary":true,"text":[{"text":"    fn toggle(&mut self) -> Result<(), Self::Error> {","highlight_start":40,"highlight_end":51}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1445,"byte_end":1456,"line_start":54,"line_end":54,"column_start":40,"column_end":51,"is_primary":true,"text":[{"text":"    fn toggle(&mut self) -> Result<(), Self::Error> {","highlight_start":40,"highlight_end":51}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1445,"byte_end":1456,"line_start":54,"line_end":54,"column_start":40,"column_end":51,"is_primary":true,"text":[{"text":"    fn toggle(&mut self) -> Result<(), Self::Error> {","highlight_start":40,"highlight_end":51}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1445,"byte_end":1456,"line_start":54,"line_end":54,"column_start":40,"column_end":51,"is_primary":true,"text":[{"text":"    fn toggle(&mut self) -> Result<(), Self::Error> {","highlight_start":40,"highlight_end":51}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1445,"byte_end":1456,"line_start":54,"line_end":54,"column_start":40,"column_end":51,"is_primary":true,"text":[{"text":"    fn toggle(&mut self) -> Result<(), Self::Error> {","highlight_start":40,"highlight_end":51}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1445,"byte_end":1456,"line_start":54,"line_end":54,"column_start":40,"column_end":51,"is_primary":true,"text":[{"text":"    fn toggle(&mut self) -> Result<(), Self::Error> {","highlight_start":40,"highlight_end":51}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1445,"byte_end":1456,"line_start":54,"line_end":54,"column_start":40,"column_end":51,"is_primary":true,"text":[{"text":"    fn toggle(&mut self) -> Result<(), Self::Error> {","highlight_start":40,"highlight_end":51}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1445,"byte_end":1456,"line_start":54,"line_end":54,"column_start":40,"column_end":51,"is_primary":true,"text":[{"text":"    fn toggle(&mut self) -> Result<(), Self::Error> {","highlight_start":40,"highlight_end":51}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<MODE>, P, N> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:54:40\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn toggle(&mut self) -> Result<(), Self::Error> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn toggle(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<MODE>, P, N> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn toggle(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<MODE>, P, N> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn toggle(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<MODE>, P, N> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn toggle(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<MODE>, P, N> as _embedded_hal_blocking_spi_Transfer>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m     and 6 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1644,"byte_end":1655,"line_start":62,"line_end":62,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1644,"byte_end":1655,"line_start":62,"line_end":62,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as IoPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1644,"byte_end":1655,"line_start":62,"line_end":62,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1644,"byte_end":1655,"line_start":62,"line_end":62,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1644,"byte_end":1655,"line_start":62,"line_end":62,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1644,"byte_end":1655,"line_start":62,"line_end":62,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1644,"byte_end":1655,"line_start":62,"line_end":62,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1644,"byte_end":1655,"line_start":62,"line_end":62,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1644,"byte_end":1655,"line_start":62,"line_end":62,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1644,"byte_end":1655,"line_start":62,"line_end":62,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1644,"byte_end":1655,"line_start":62,"line_end":62,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1644,"byte_end":1655,"line_start":62,"line_end":62,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:62:39\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn is_high(&self) -> Result<bool, Self::Error> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_high(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as IoPin>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_high(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_high(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_high(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m     and 7 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1752,"byte_end":1763,"line_start":67,"line_end":67,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1752,"byte_end":1763,"line_start":67,"line_end":67,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as IoPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1752,"byte_end":1763,"line_start":67,"line_end":67,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1752,"byte_end":1763,"line_start":67,"line_end":67,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1752,"byte_end":1763,"line_start":67,"line_end":67,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1752,"byte_end":1763,"line_start":67,"line_end":67,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1752,"byte_end":1763,"line_start":67,"line_end":67,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1752,"byte_end":1763,"line_start":67,"line_end":67,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1752,"byte_end":1763,"line_start":67,"line_end":67,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1752,"byte_end":1763,"line_start":67,"line_end":67,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1752,"byte_end":1763,"line_start":67,"line_end":67,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1752,"byte_end":1763,"line_start":67,"line_end":67,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:67:38\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn is_low(&self) -> Result<bool, Self::Error> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_low(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as IoPin>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_low(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_low(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m67\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_low(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m     and 7 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1939,"byte_end":1950,"line_start":74,"line_end":74,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1939,"byte_end":1950,"line_start":74,"line_end":74,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<MODE>, P, N> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1939,"byte_end":1950,"line_start":74,"line_end":74,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<MODE>, P, N> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1939,"byte_end":1950,"line_start":74,"line_end":74,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<MODE>, P, N> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1939,"byte_end":1950,"line_start":74,"line_end":74,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<MODE>, P, N> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1939,"byte_end":1950,"line_start":74,"line_end":74,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<MODE>, P, N> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1939,"byte_end":1950,"line_start":74,"line_end":74,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<MODE>, P, N> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1939,"byte_end":1950,"line_start":74,"line_end":74,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<MODE>, P, N> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1939,"byte_end":1950,"line_start":74,"line_end":74,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<MODE>, P, N> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1939,"byte_end":1950,"line_start":74,"line_end":74,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<MODE>, P, N> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":1939,"byte_end":1950,"line_start":74,"line_end":74,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<MODE>, P, N> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:74:39\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m74\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn is_high(&self) -> Result<bool, Self::Error> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m74\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_high(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Input<MODE>, P, N> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m74\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_high(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Input<MODE>, P, N> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m74\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_high(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Input<MODE>, P, N> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m74\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_high(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Input<MODE>, P, N> as _embedded_hal_blocking_spi_Transfer>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m     and 6 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2047,"byte_end":2058,"line_start":79,"line_end":79,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2047,"byte_end":2058,"line_start":79,"line_end":79,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<MODE>, P, N> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2047,"byte_end":2058,"line_start":79,"line_end":79,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<MODE>, P, N> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2047,"byte_end":2058,"line_start":79,"line_end":79,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<MODE>, P, N> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2047,"byte_end":2058,"line_start":79,"line_end":79,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<MODE>, P, N> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2047,"byte_end":2058,"line_start":79,"line_end":79,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<MODE>, P, N> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2047,"byte_end":2058,"line_start":79,"line_end":79,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<MODE>, P, N> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2047,"byte_end":2058,"line_start":79,"line_end":79,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<MODE>, P, N> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2047,"byte_end":2058,"line_start":79,"line_end":79,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<MODE>, P, N> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2047,"byte_end":2058,"line_start":79,"line_end":79,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<MODE>, P, N> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2047,"byte_end":2058,"line_start":79,"line_end":79,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<MODE>, P, N> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:79:38\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn is_low(&self) -> Result<bool, Self::Error> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_low(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Input<MODE>, P, N> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_low(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Input<MODE>, P, N> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_low(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Input<MODE>, P, N> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_low(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Input<MODE>, P, N> as _embedded_hal_blocking_spi_Transfer>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m     and 6 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2256,"byte_end":2267,"line_start":86,"line_end":86,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2256,"byte_end":2267,"line_start":86,"line_end":86,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as IoPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2256,"byte_end":2267,"line_start":86,"line_end":86,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2256,"byte_end":2267,"line_start":86,"line_end":86,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2256,"byte_end":2267,"line_start":86,"line_end":86,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2256,"byte_end":2267,"line_start":86,"line_end":86,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2256,"byte_end":2267,"line_start":86,"line_end":86,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2256,"byte_end":2267,"line_start":86,"line_end":86,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2256,"byte_end":2267,"line_start":86,"line_end":86,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2256,"byte_end":2267,"line_start":86,"line_end":86,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2256,"byte_end":2267,"line_start":86,"line_end":86,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2256,"byte_end":2267,"line_start":86,"line_end":86,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:86:45\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m86\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Self, Self::Error> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m86\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Self, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as IoPin>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m86\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Self, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m86\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Self, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m86\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Self, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m     and 7 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2360,"byte_end":2371,"line_start":89,"line_end":89,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2360,"byte_end":2371,"line_start":89,"line_end":89,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as IoPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2360,"byte_end":2371,"line_start":89,"line_end":89,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2360,"byte_end":2371,"line_start":89,"line_end":89,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2360,"byte_end":2371,"line_start":89,"line_end":89,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2360,"byte_end":2371,"line_start":89,"line_end":89,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2360,"byte_end":2371,"line_start":89,"line_end":89,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2360,"byte_end":2371,"line_start":89,"line_end":89,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2360,"byte_end":2371,"line_start":89,"line_end":89,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2360,"byte_end":2371,"line_start":89,"line_end":89,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2360,"byte_end":2371,"line_start":89,"line_end":89,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2360,"byte_end":2371,"line_start":89,"line_end":89,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:89:67\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m89\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m89\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_output_pin(mut self, state: PinState) -> Result<Self, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as IoPin>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m89\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_output_pin(mut self, state: PinState) -> Result<Self, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m89\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_output_pin(mut self, state: PinState) -> Result<Self, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m89\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_output_pin(mut self, state: PinState) -> Result<Self, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m     and 7 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2651,"byte_end":2662,"line_start":99,"line_end":99,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<Floating>, P, N>, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2651,"byte_end":2662,"line_start":99,"line_end":99,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<Floating>, P, N>, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as IoPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2651,"byte_end":2662,"line_start":99,"line_end":99,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<Floating>, P, N>, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2651,"byte_end":2662,"line_start":99,"line_end":99,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<Floating>, P, N>, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2651,"byte_end":2662,"line_start":99,"line_end":99,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<Floating>, P, N>, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2651,"byte_end":2662,"line_start":99,"line_end":99,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<Floating>, P, N>, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2651,"byte_end":2662,"line_start":99,"line_end":99,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<Floating>, P, N>, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2651,"byte_end":2662,"line_start":99,"line_end":99,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<Floating>, P, N>, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2651,"byte_end":2662,"line_start":99,"line_end":99,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<Floating>, P, N>, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2651,"byte_end":2662,"line_start":99,"line_end":99,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<Floating>, P, N>, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2651,"byte_end":2662,"line_start":99,"line_end":99,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<Floating>, P, N>, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2651,"byte_end":2662,"line_start":99,"line_end":99,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<Floating>, P, N>, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:99:67\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Pin<Input<Floating>, P, N>, Self::Error> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Pin<Input<Floating>, P, N>, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as IoPin>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Pin<Input<Floating>, P, N>, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Pin<Input<Floating>, P, N>, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Pin<Input<Floating>, P, N>, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m     and 7 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2777,"byte_end":2788,"line_start":102,"line_end":102,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2777,"byte_end":2788,"line_start":102,"line_end":102,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as IoPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2777,"byte_end":2788,"line_start":102,"line_end":102,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2777,"byte_end":2788,"line_start":102,"line_end":102,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2777,"byte_end":2788,"line_start":102,"line_end":102,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2777,"byte_end":2788,"line_start":102,"line_end":102,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2777,"byte_end":2788,"line_start":102,"line_end":102,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2777,"byte_end":2788,"line_start":102,"line_end":102,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2777,"byte_end":2788,"line_start":102,"line_end":102,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2777,"byte_end":2788,"line_start":102,"line_end":102,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2777,"byte_end":2788,"line_start":102,"line_end":102,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":2777,"byte_end":2788,"line_start":102,"line_end":102,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:102:67\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_output_pin(mut self, state: PinState) -> Result<Self, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as IoPin>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_output_pin(mut self, state: PinState) -> Result<Self, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_output_pin(mut self, state: PinState) -> Result<Self, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m102\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_output_pin(mut self, state: PinState) -> Result<Self, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::OpenDrain>, P, N> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m      and 7 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3046,"byte_end":3057,"line_start":112,"line_end":112,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3046,"byte_end":3057,"line_start":112,"line_end":112,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as IoPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3046,"byte_end":3057,"line_start":112,"line_end":112,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3046,"byte_end":3057,"line_start":112,"line_end":112,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3046,"byte_end":3057,"line_start":112,"line_end":112,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3046,"byte_end":3057,"line_start":112,"line_end":112,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3046,"byte_end":3057,"line_start":112,"line_end":112,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3046,"byte_end":3057,"line_start":112,"line_end":112,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3046,"byte_end":3057,"line_start":112,"line_end":112,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3046,"byte_end":3057,"line_start":112,"line_end":112,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3046,"byte_end":3057,"line_start":112,"line_end":112,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3046,"byte_end":3057,"line_start":112,"line_end":112,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:112:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Self, Self::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Self, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as IoPin>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Self, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Self, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m112\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Self, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m      and 7 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3170,"byte_end":3181,"line_start":115,"line_end":115,"column_start":87,"column_end":98,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<OpenDrain>, P, N>, Self::Error> {","highlight_start":87,"highlight_end":98}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3170,"byte_end":3181,"line_start":115,"line_end":115,"column_start":87,"column_end":98,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<OpenDrain>, P, N>, Self::Error> {","highlight_start":87,"highlight_end":98}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as IoPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3170,"byte_end":3181,"line_start":115,"line_end":115,"column_start":87,"column_end":98,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<OpenDrain>, P, N>, Self::Error> {","highlight_start":87,"highlight_end":98}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3170,"byte_end":3181,"line_start":115,"line_end":115,"column_start":87,"column_end":98,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<OpenDrain>, P, N>, Self::Error> {","highlight_start":87,"highlight_end":98}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3170,"byte_end":3181,"line_start":115,"line_end":115,"column_start":87,"column_end":98,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<OpenDrain>, P, N>, Self::Error> {","highlight_start":87,"highlight_end":98}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3170,"byte_end":3181,"line_start":115,"line_end":115,"column_start":87,"column_end":98,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<OpenDrain>, P, N>, Self::Error> {","highlight_start":87,"highlight_end":98}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3170,"byte_end":3181,"line_start":115,"line_end":115,"column_start":87,"column_end":98,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<OpenDrain>, P, N>, Self::Error> {","highlight_start":87,"highlight_end":98}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3170,"byte_end":3181,"line_start":115,"line_end":115,"column_start":87,"column_end":98,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<OpenDrain>, P, N>, Self::Error> {","highlight_start":87,"highlight_end":98}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3170,"byte_end":3181,"line_start":115,"line_end":115,"column_start":87,"column_end":98,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<OpenDrain>, P, N>, Self::Error> {","highlight_start":87,"highlight_end":98}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3170,"byte_end":3181,"line_start":115,"line_end":115,"column_start":87,"column_end":98,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<OpenDrain>, P, N>, Self::Error> {","highlight_start":87,"highlight_end":98}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3170,"byte_end":3181,"line_start":115,"line_end":115,"column_start":87,"column_end":98,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<OpenDrain>, P, N>, Self::Error> {","highlight_start":87,"highlight_end":98}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3170,"byte_end":3181,"line_start":115,"line_end":115,"column_start":87,"column_end":98,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<OpenDrain>, P, N>, Self::Error> {","highlight_start":87,"highlight_end":98}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:115:87\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m115\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<OpenDrain>, P, N>, Self::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m115\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<OpenDrain>, P, N>, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as IoPin>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                                       \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m115\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<OpenDrain>, P, N>, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                                       \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m115\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<OpenDrain>, P, N>, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                                       \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m115\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<OpenDrain>, P, N>, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                                       \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m      and 7 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3468,"byte_end":3479,"line_start":124,"line_end":124,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<Floating>, P, N>, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3468,"byte_end":3479,"line_start":124,"line_end":124,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<Floating>, P, N>, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as IoPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3468,"byte_end":3479,"line_start":124,"line_end":124,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<Floating>, P, N>, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3468,"byte_end":3479,"line_start":124,"line_end":124,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<Floating>, P, N>, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3468,"byte_end":3479,"line_start":124,"line_end":124,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<Floating>, P, N>, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3468,"byte_end":3479,"line_start":124,"line_end":124,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<Floating>, P, N>, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3468,"byte_end":3479,"line_start":124,"line_end":124,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<Floating>, P, N>, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3468,"byte_end":3479,"line_start":124,"line_end":124,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<Floating>, P, N>, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3468,"byte_end":3479,"line_start":124,"line_end":124,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<Floating>, P, N>, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3468,"byte_end":3479,"line_start":124,"line_end":124,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<Floating>, P, N>, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3468,"byte_end":3479,"line_start":124,"line_end":124,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<Floating>, P, N>, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3468,"byte_end":3479,"line_start":124,"line_end":124,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<Floating>, P, N>, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:124:67\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Pin<Input<Floating>, P, N>, Self::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Pin<Input<Floating>, P, N>, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as IoPin>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Pin<Input<Floating>, P, N>, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Pin<Input<Floating>, P, N>, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Pin<Input<Floating>, P, N>, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m      and 7 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3594,"byte_end":3605,"line_start":127,"line_end":127,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3594,"byte_end":3605,"line_start":127,"line_end":127,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as IoPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3594,"byte_end":3605,"line_start":127,"line_end":127,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3594,"byte_end":3605,"line_start":127,"line_end":127,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3594,"byte_end":3605,"line_start":127,"line_end":127,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3594,"byte_end":3605,"line_start":127,"line_end":127,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3594,"byte_end":3605,"line_start":127,"line_end":127,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3594,"byte_end":3605,"line_start":127,"line_end":127,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3594,"byte_end":3605,"line_start":127,"line_end":127,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3594,"byte_end":3605,"line_start":127,"line_end":127,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3594,"byte_end":3605,"line_start":127,"line_end":127,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3594,"byte_end":3605,"line_start":127,"line_end":127,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:127:67\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_output_pin(mut self, state: PinState) -> Result<Self, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as IoPin>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_output_pin(mut self, state: PinState) -> Result<Self, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_output_pin(mut self, state: PinState) -> Result<Self, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_output_pin(mut self, state: PinState) -> Result<Self, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m      and 7 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3862,"byte_end":3873,"line_start":137,"line_end":137,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3862,"byte_end":3873,"line_start":137,"line_end":137,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as IoPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3862,"byte_end":3873,"line_start":137,"line_end":137,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3862,"byte_end":3873,"line_start":137,"line_end":137,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3862,"byte_end":3873,"line_start":137,"line_end":137,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3862,"byte_end":3873,"line_start":137,"line_end":137,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3862,"byte_end":3873,"line_start":137,"line_end":137,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3862,"byte_end":3873,"line_start":137,"line_end":137,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3862,"byte_end":3873,"line_start":137,"line_end":137,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3862,"byte_end":3873,"line_start":137,"line_end":137,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3862,"byte_end":3873,"line_start":137,"line_end":137,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3862,"byte_end":3873,"line_start":137,"line_end":137,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:137:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m137\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Self, Self::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m137\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Self, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as IoPin>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m137\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Self, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m137\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Self, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m137\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Self, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m      and 7 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3985,"byte_end":3996,"line_start":140,"line_end":140,"column_start":86,"column_end":97,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, Self::Error> {","highlight_start":86,"highlight_end":97}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3985,"byte_end":3996,"line_start":140,"line_end":140,"column_start":86,"column_end":97,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, Self::Error> {","highlight_start":86,"highlight_end":97}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as IoPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3985,"byte_end":3996,"line_start":140,"line_end":140,"column_start":86,"column_end":97,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, Self::Error> {","highlight_start":86,"highlight_end":97}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3985,"byte_end":3996,"line_start":140,"line_end":140,"column_start":86,"column_end":97,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, Self::Error> {","highlight_start":86,"highlight_end":97}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3985,"byte_end":3996,"line_start":140,"line_end":140,"column_start":86,"column_end":97,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, Self::Error> {","highlight_start":86,"highlight_end":97}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3985,"byte_end":3996,"line_start":140,"line_end":140,"column_start":86,"column_end":97,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, Self::Error> {","highlight_start":86,"highlight_end":97}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3985,"byte_end":3996,"line_start":140,"line_end":140,"column_start":86,"column_end":97,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, Self::Error> {","highlight_start":86,"highlight_end":97}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3985,"byte_end":3996,"line_start":140,"line_end":140,"column_start":86,"column_end":97,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, Self::Error> {","highlight_start":86,"highlight_end":97}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3985,"byte_end":3996,"line_start":140,"line_end":140,"column_start":86,"column_end":97,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, Self::Error> {","highlight_start":86,"highlight_end":97}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3985,"byte_end":3996,"line_start":140,"line_end":140,"column_start":86,"column_end":97,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, Self::Error> {","highlight_start":86,"highlight_end":97}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3985,"byte_end":3996,"line_start":140,"line_end":140,"column_start":86,"column_end":97,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, Self::Error> {","highlight_start":86,"highlight_end":97}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":3985,"byte_end":3996,"line_start":140,"line_end":140,"column_start":86,"column_end":97,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, Self::Error> {","highlight_start":86,"highlight_end":97}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:140:86\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m140\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, Self::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m140\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as IoPin>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                                      \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m140\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                                      \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m140\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                                      \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m140\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Input<gpio::Floating>, P, N> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                                      \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m      and 7 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4278,"byte_end":4289,"line_start":149,"line_end":149,"column_start":65,"column_end":76,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<PullUp>, P, N>, Self::Error> {","highlight_start":65,"highlight_end":76}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4278,"byte_end":4289,"line_start":149,"line_end":149,"column_start":65,"column_end":76,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<PullUp>, P, N>, Self::Error> {","highlight_start":65,"highlight_end":76}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as IoPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4278,"byte_end":4289,"line_start":149,"line_end":149,"column_start":65,"column_end":76,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<PullUp>, P, N>, Self::Error> {","highlight_start":65,"highlight_end":76}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4278,"byte_end":4289,"line_start":149,"line_end":149,"column_start":65,"column_end":76,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<PullUp>, P, N>, Self::Error> {","highlight_start":65,"highlight_end":76}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4278,"byte_end":4289,"line_start":149,"line_end":149,"column_start":65,"column_end":76,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<PullUp>, P, N>, Self::Error> {","highlight_start":65,"highlight_end":76}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4278,"byte_end":4289,"line_start":149,"line_end":149,"column_start":65,"column_end":76,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<PullUp>, P, N>, Self::Error> {","highlight_start":65,"highlight_end":76}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4278,"byte_end":4289,"line_start":149,"line_end":149,"column_start":65,"column_end":76,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<PullUp>, P, N>, Self::Error> {","highlight_start":65,"highlight_end":76}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4278,"byte_end":4289,"line_start":149,"line_end":149,"column_start":65,"column_end":76,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<PullUp>, P, N>, Self::Error> {","highlight_start":65,"highlight_end":76}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4278,"byte_end":4289,"line_start":149,"line_end":149,"column_start":65,"column_end":76,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<PullUp>, P, N>, Self::Error> {","highlight_start":65,"highlight_end":76}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4278,"byte_end":4289,"line_start":149,"line_end":149,"column_start":65,"column_end":76,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<PullUp>, P, N>, Self::Error> {","highlight_start":65,"highlight_end":76}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4278,"byte_end":4289,"line_start":149,"line_end":149,"column_start":65,"column_end":76,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<PullUp>, P, N>, Self::Error> {","highlight_start":65,"highlight_end":76}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4278,"byte_end":4289,"line_start":149,"line_end":149,"column_start":65,"column_end":76,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<PullUp>, P, N>, Self::Error> {","highlight_start":65,"highlight_end":76}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:149:65\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Pin<Input<PullUp>, P, N>, Self::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Pin<Input<PullUp>, P, N>, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as IoPin>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                 \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Pin<Input<PullUp>, P, N>, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                 \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Pin<Input<PullUp>, P, N>, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                 \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m149\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Pin<Input<PullUp>, P, N>, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                 \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m      and 7 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4403,"byte_end":4414,"line_start":152,"line_end":152,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4403,"byte_end":4414,"line_start":152,"line_end":152,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as IoPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4403,"byte_end":4414,"line_start":152,"line_end":152,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4403,"byte_end":4414,"line_start":152,"line_end":152,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4403,"byte_end":4414,"line_start":152,"line_end":152,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4403,"byte_end":4414,"line_start":152,"line_end":152,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4403,"byte_end":4414,"line_start":152,"line_end":152,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4403,"byte_end":4414,"line_start":152,"line_end":152,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4403,"byte_end":4414,"line_start":152,"line_end":152,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4403,"byte_end":4414,"line_start":152,"line_end":152,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4403,"byte_end":4414,"line_start":152,"line_end":152,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4403,"byte_end":4414,"line_start":152,"line_end":152,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:152:67\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m152\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m152\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_output_pin(mut self, state: PinState) -> Result<Self, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as IoPin>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m152\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_output_pin(mut self, state: PinState) -> Result<Self, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m152\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_output_pin(mut self, state: PinState) -> Result<Self, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m152\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_output_pin(mut self, state: PinState) -> Result<Self, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m      and 7 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4669,"byte_end":4680,"line_start":162,"line_end":162,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4669,"byte_end":4680,"line_start":162,"line_end":162,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullUp>, P, N> as IoPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4669,"byte_end":4680,"line_start":162,"line_end":162,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullUp>, P, N> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4669,"byte_end":4680,"line_start":162,"line_end":162,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullUp>, P, N> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4669,"byte_end":4680,"line_start":162,"line_end":162,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullUp>, P, N> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4669,"byte_end":4680,"line_start":162,"line_end":162,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullUp>, P, N> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4669,"byte_end":4680,"line_start":162,"line_end":162,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullUp>, P, N> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4669,"byte_end":4680,"line_start":162,"line_end":162,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullUp>, P, N> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4669,"byte_end":4680,"line_start":162,"line_end":162,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullUp>, P, N> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4669,"byte_end":4680,"line_start":162,"line_end":162,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullUp>, P, N> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4669,"byte_end":4680,"line_start":162,"line_end":162,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullUp>, P, N> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4669,"byte_end":4680,"line_start":162,"line_end":162,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullUp>, P, N> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:162:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Self, Self::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Self, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Input<gpio::PullUp>, P, N> as IoPin>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Self, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Input<gpio::PullUp>, P, N> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Self, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Input<gpio::PullUp>, P, N> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m162\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Self, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Input<gpio::PullUp>, P, N> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m      and 7 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4792,"byte_end":4803,"line_start":165,"line_end":165,"column_start":86,"column_end":97,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, Self::Error> {","highlight_start":86,"highlight_end":97}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4792,"byte_end":4803,"line_start":165,"line_end":165,"column_start":86,"column_end":97,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, Self::Error> {","highlight_start":86,"highlight_end":97}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullUp>, P, N> as IoPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4792,"byte_end":4803,"line_start":165,"line_end":165,"column_start":86,"column_end":97,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, Self::Error> {","highlight_start":86,"highlight_end":97}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullUp>, P, N> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4792,"byte_end":4803,"line_start":165,"line_end":165,"column_start":86,"column_end":97,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, Self::Error> {","highlight_start":86,"highlight_end":97}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullUp>, P, N> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4792,"byte_end":4803,"line_start":165,"line_end":165,"column_start":86,"column_end":97,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, Self::Error> {","highlight_start":86,"highlight_end":97}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullUp>, P, N> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4792,"byte_end":4803,"line_start":165,"line_end":165,"column_start":86,"column_end":97,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, Self::Error> {","highlight_start":86,"highlight_end":97}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullUp>, P, N> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4792,"byte_end":4803,"line_start":165,"line_end":165,"column_start":86,"column_end":97,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, Self::Error> {","highlight_start":86,"highlight_end":97}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullUp>, P, N> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4792,"byte_end":4803,"line_start":165,"line_end":165,"column_start":86,"column_end":97,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, Self::Error> {","highlight_start":86,"highlight_end":97}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullUp>, P, N> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4792,"byte_end":4803,"line_start":165,"line_end":165,"column_start":86,"column_end":97,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, Self::Error> {","highlight_start":86,"highlight_end":97}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullUp>, P, N> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4792,"byte_end":4803,"line_start":165,"line_end":165,"column_start":86,"column_end":97,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, Self::Error> {","highlight_start":86,"highlight_end":97}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullUp>, P, N> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4792,"byte_end":4803,"line_start":165,"line_end":165,"column_start":86,"column_end":97,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, Self::Error> {","highlight_start":86,"highlight_end":97}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullUp>, P, N> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":4792,"byte_end":4803,"line_start":165,"line_end":165,"column_start":86,"column_end":97,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, Self::Error> {","highlight_start":86,"highlight_end":97}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullUp>, P, N> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:165:86\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, Self::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Input<gpio::PullUp>, P, N> as IoPin>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                                      \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Input<gpio::PullUp>, P, N> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                                      \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Input<gpio::PullUp>, P, N> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                                      \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m165\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Input<gpio::PullUp>, P, N> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                                      \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m      and 7 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5089,"byte_end":5100,"line_start":174,"line_end":174,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<PullDown>, P, N>, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5089,"byte_end":5100,"line_start":174,"line_end":174,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<PullDown>, P, N>, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as IoPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5089,"byte_end":5100,"line_start":174,"line_end":174,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<PullDown>, P, N>, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5089,"byte_end":5100,"line_start":174,"line_end":174,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<PullDown>, P, N>, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5089,"byte_end":5100,"line_start":174,"line_end":174,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<PullDown>, P, N>, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5089,"byte_end":5100,"line_start":174,"line_end":174,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<PullDown>, P, N>, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5089,"byte_end":5100,"line_start":174,"line_end":174,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<PullDown>, P, N>, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5089,"byte_end":5100,"line_start":174,"line_end":174,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<PullDown>, P, N>, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5089,"byte_end":5100,"line_start":174,"line_end":174,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<PullDown>, P, N>, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5089,"byte_end":5100,"line_start":174,"line_end":174,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<PullDown>, P, N>, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5089,"byte_end":5100,"line_start":174,"line_end":174,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<PullDown>, P, N>, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5089,"byte_end":5100,"line_start":174,"line_end":174,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Pin<Input<PullDown>, P, N>, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:174:67\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Pin<Input<PullDown>, P, N>, Self::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Pin<Input<PullDown>, P, N>, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as IoPin>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Pin<Input<PullDown>, P, N>, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Pin<Input<PullDown>, P, N>, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m174\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Pin<Input<PullDown>, P, N>, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m      and 7 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5216,"byte_end":5227,"line_start":177,"line_end":177,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5216,"byte_end":5227,"line_start":177,"line_end":177,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as IoPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5216,"byte_end":5227,"line_start":177,"line_end":177,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5216,"byte_end":5227,"line_start":177,"line_end":177,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5216,"byte_end":5227,"line_start":177,"line_end":177,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5216,"byte_end":5227,"line_start":177,"line_end":177,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5216,"byte_end":5227,"line_start":177,"line_end":177,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5216,"byte_end":5227,"line_start":177,"line_end":177,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5216,"byte_end":5227,"line_start":177,"line_end":177,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5216,"byte_end":5227,"line_start":177,"line_end":177,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5216,"byte_end":5227,"line_start":177,"line_end":177,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5216,"byte_end":5227,"line_start":177,"line_end":177,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:177:67\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn into_output_pin(mut self, state: PinState) -> Result<Self, Self::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_output_pin(mut self, state: PinState) -> Result<Self, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as IoPin>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_output_pin(mut self, state: PinState) -> Result<Self, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_output_pin(mut self, state: PinState) -> Result<Self, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_output_pin(mut self, state: PinState) -> Result<Self, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Output<gpio::PushPull>, P, N> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m      and 7 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5484,"byte_end":5495,"line_start":187,"line_end":187,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5484,"byte_end":5495,"line_start":187,"line_end":187,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullDown>, P, N> as IoPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5484,"byte_end":5495,"line_start":187,"line_end":187,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullDown>, P, N> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5484,"byte_end":5495,"line_start":187,"line_end":187,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullDown>, P, N> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5484,"byte_end":5495,"line_start":187,"line_end":187,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullDown>, P, N> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5484,"byte_end":5495,"line_start":187,"line_end":187,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullDown>, P, N> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5484,"byte_end":5495,"line_start":187,"line_end":187,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullDown>, P, N> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5484,"byte_end":5495,"line_start":187,"line_end":187,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullDown>, P, N> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5484,"byte_end":5495,"line_start":187,"line_end":187,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullDown>, P, N> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5484,"byte_end":5495,"line_start":187,"line_end":187,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullDown>, P, N> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5484,"byte_end":5495,"line_start":187,"line_end":187,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullDown>, P, N> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5484,"byte_end":5495,"line_start":187,"line_end":187,"column_start":45,"column_end":56,"is_primary":true,"text":[{"text":"    fn into_input_pin(self) -> Result<Self, Self::Error> {","highlight_start":45,"highlight_end":56}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullDown>, P, N> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:187:45\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m187\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Self, Self::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m187\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Self, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Input<gpio::PullDown>, P, N> as IoPin>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m187\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Self, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Input<gpio::PullDown>, P, N> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m187\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Self, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Input<gpio::PullDown>, P, N> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m187\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_input_pin(self) -> Result<Self, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Input<gpio::PullDown>, P, N> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                             \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m      and 7 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5607,"byte_end":5618,"line_start":190,"line_end":190,"column_start":86,"column_end":97,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, Self::Error> {","highlight_start":86,"highlight_end":97}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5607,"byte_end":5618,"line_start":190,"line_end":190,"column_start":86,"column_end":97,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, Self::Error> {","highlight_start":86,"highlight_end":97}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullDown>, P, N> as IoPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5607,"byte_end":5618,"line_start":190,"line_end":190,"column_start":86,"column_end":97,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, Self::Error> {","highlight_start":86,"highlight_end":97}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullDown>, P, N> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5607,"byte_end":5618,"line_start":190,"line_end":190,"column_start":86,"column_end":97,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, Self::Error> {","highlight_start":86,"highlight_end":97}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullDown>, P, N> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5607,"byte_end":5618,"line_start":190,"line_end":190,"column_start":86,"column_end":97,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, Self::Error> {","highlight_start":86,"highlight_end":97}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullDown>, P, N> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5607,"byte_end":5618,"line_start":190,"line_end":190,"column_start":86,"column_end":97,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, Self::Error> {","highlight_start":86,"highlight_end":97}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullDown>, P, N> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5607,"byte_end":5618,"line_start":190,"line_end":190,"column_start":86,"column_end":97,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, Self::Error> {","highlight_start":86,"highlight_end":97}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullDown>, P, N> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5607,"byte_end":5618,"line_start":190,"line_end":190,"column_start":86,"column_end":97,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, Self::Error> {","highlight_start":86,"highlight_end":97}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullDown>, P, N> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5607,"byte_end":5618,"line_start":190,"line_end":190,"column_start":86,"column_end":97,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, Self::Error> {","highlight_start":86,"highlight_end":97}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullDown>, P, N> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5607,"byte_end":5618,"line_start":190,"line_end":190,"column_start":86,"column_end":97,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, Self::Error> {","highlight_start":86,"highlight_end":97}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullDown>, P, N> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5607,"byte_end":5618,"line_start":190,"line_end":190,"column_start":86,"column_end":97,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, Self::Error> {","highlight_start":86,"highlight_end":97}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullDown>, P, N> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5607,"byte_end":5618,"line_start":190,"line_end":190,"column_start":86,"column_end":97,"is_primary":true,"text":[{"text":"    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, Self::Error> {","highlight_start":86,"highlight_end":97}],"label":null,"suggested_replacement":"<gpio::Pin<gpio::Input<gpio::PullDown>, P, N> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:190:86\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m190\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, Self::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m190\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Input<gpio::PullDown>, P, N> as IoPin>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                                      \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m190\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Input<gpio::PullDown>, P, N> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                                      \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m190\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Input<gpio::PullDown>, P, N> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                                      \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m190\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn into_output_pin(self, state: PinState) -> Result<Pin<Output<PushPull>, P, N>, \u001b[0m\u001b[0m\u001b[38;5;10m<gpio::Pin<gpio::Input<gpio::PullDown>, P, N> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                                      \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m      and 7 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5937,"byte_end":5948,"line_start":202,"line_end":202,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn set_high(&mut self) -> Result<(), Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5937,"byte_end":5948,"line_start":202,"line_end":202,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn set_high(&mut self) -> Result<(), Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5937,"byte_end":5948,"line_start":202,"line_end":202,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn set_high(&mut self) -> Result<(), Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5937,"byte_end":5948,"line_start":202,"line_end":202,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn set_high(&mut self) -> Result<(), Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5937,"byte_end":5948,"line_start":202,"line_end":202,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn set_high(&mut self) -> Result<(), Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5937,"byte_end":5948,"line_start":202,"line_end":202,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn set_high(&mut self) -> Result<(), Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5937,"byte_end":5948,"line_start":202,"line_end":202,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn set_high(&mut self) -> Result<(), Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5937,"byte_end":5948,"line_start":202,"line_end":202,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn set_high(&mut self) -> Result<(), Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5937,"byte_end":5948,"line_start":202,"line_end":202,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn set_high(&mut self) -> Result<(), Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5937,"byte_end":5948,"line_start":202,"line_end":202,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn set_high(&mut self) -> Result<(), Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":5937,"byte_end":5948,"line_start":202,"line_end":202,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn set_high(&mut self) -> Result<(), Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:202:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m202\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn set_high(&mut self) -> Result<(), Self::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m202\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn set_high(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<ErasedPin<gpio::Output<MODE>> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m202\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn set_high(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<ErasedPin<gpio::Output<MODE>> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m202\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn set_high(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<ErasedPin<gpio::Output<MODE>> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m202\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn set_high(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<ErasedPin<gpio::Output<MODE>> as _embedded_hal_blocking_spi_Transfer>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m      and 6 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6061,"byte_end":6072,"line_start":208,"line_end":208,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"    fn set_low(&mut self) -> Result<(), Self::Error> {","highlight_start":41,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6061,"byte_end":6072,"line_start":208,"line_end":208,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"    fn set_low(&mut self) -> Result<(), Self::Error> {","highlight_start":41,"highlight_end":52}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6061,"byte_end":6072,"line_start":208,"line_end":208,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"    fn set_low(&mut self) -> Result<(), Self::Error> {","highlight_start":41,"highlight_end":52}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6061,"byte_end":6072,"line_start":208,"line_end":208,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"    fn set_low(&mut self) -> Result<(), Self::Error> {","highlight_start":41,"highlight_end":52}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6061,"byte_end":6072,"line_start":208,"line_end":208,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"    fn set_low(&mut self) -> Result<(), Self::Error> {","highlight_start":41,"highlight_end":52}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6061,"byte_end":6072,"line_start":208,"line_end":208,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"    fn set_low(&mut self) -> Result<(), Self::Error> {","highlight_start":41,"highlight_end":52}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6061,"byte_end":6072,"line_start":208,"line_end":208,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"    fn set_low(&mut self) -> Result<(), Self::Error> {","highlight_start":41,"highlight_end":52}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6061,"byte_end":6072,"line_start":208,"line_end":208,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"    fn set_low(&mut self) -> Result<(), Self::Error> {","highlight_start":41,"highlight_end":52}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6061,"byte_end":6072,"line_start":208,"line_end":208,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"    fn set_low(&mut self) -> Result<(), Self::Error> {","highlight_start":41,"highlight_end":52}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6061,"byte_end":6072,"line_start":208,"line_end":208,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"    fn set_low(&mut self) -> Result<(), Self::Error> {","highlight_start":41,"highlight_end":52}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6061,"byte_end":6072,"line_start":208,"line_end":208,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"    fn set_low(&mut self) -> Result<(), Self::Error> {","highlight_start":41,"highlight_end":52}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:208:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m208\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn set_low(&mut self) -> Result<(), Self::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m208\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn set_low(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<ErasedPin<gpio::Output<MODE>> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m208\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn set_low(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<ErasedPin<gpio::Output<MODE>> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m208\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn set_low(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<ErasedPin<gpio::Output<MODE>> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m208\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn set_low(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<ErasedPin<gpio::Output<MODE>> as _embedded_hal_blocking_spi_Transfer>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m      and 6 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6247,"byte_end":6258,"line_start":216,"line_end":216,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"    fn is_set_high(&self) -> Result<bool, Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6247,"byte_end":6258,"line_start":216,"line_end":216,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"    fn is_set_high(&self) -> Result<bool, Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6247,"byte_end":6258,"line_start":216,"line_end":216,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"    fn is_set_high(&self) -> Result<bool, Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6247,"byte_end":6258,"line_start":216,"line_end":216,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"    fn is_set_high(&self) -> Result<bool, Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6247,"byte_end":6258,"line_start":216,"line_end":216,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"    fn is_set_high(&self) -> Result<bool, Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6247,"byte_end":6258,"line_start":216,"line_end":216,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"    fn is_set_high(&self) -> Result<bool, Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6247,"byte_end":6258,"line_start":216,"line_end":216,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"    fn is_set_high(&self) -> Result<bool, Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6247,"byte_end":6258,"line_start":216,"line_end":216,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"    fn is_set_high(&self) -> Result<bool, Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6247,"byte_end":6258,"line_start":216,"line_end":216,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"    fn is_set_high(&self) -> Result<bool, Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6247,"byte_end":6258,"line_start":216,"line_end":216,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"    fn is_set_high(&self) -> Result<bool, Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6247,"byte_end":6258,"line_start":216,"line_end":216,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"    fn is_set_high(&self) -> Result<bool, Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:216:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn is_set_high(&self) -> Result<bool, Self::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_set_high(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<ErasedPin<gpio::Output<MODE>> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_set_high(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<ErasedPin<gpio::Output<MODE>> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_set_high(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<ErasedPin<gpio::Output<MODE>> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m216\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_set_high(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<ErasedPin<gpio::Output<MODE>> as _embedded_hal_blocking_spi_Transfer>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m      and 6 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6363,"byte_end":6374,"line_start":221,"line_end":221,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn is_set_low(&self) -> Result<bool, Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6363,"byte_end":6374,"line_start":221,"line_end":221,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn is_set_low(&self) -> Result<bool, Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6363,"byte_end":6374,"line_start":221,"line_end":221,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn is_set_low(&self) -> Result<bool, Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6363,"byte_end":6374,"line_start":221,"line_end":221,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn is_set_low(&self) -> Result<bool, Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6363,"byte_end":6374,"line_start":221,"line_end":221,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn is_set_low(&self) -> Result<bool, Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6363,"byte_end":6374,"line_start":221,"line_end":221,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn is_set_low(&self) -> Result<bool, Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6363,"byte_end":6374,"line_start":221,"line_end":221,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn is_set_low(&self) -> Result<bool, Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6363,"byte_end":6374,"line_start":221,"line_end":221,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn is_set_low(&self) -> Result<bool, Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6363,"byte_end":6374,"line_start":221,"line_end":221,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn is_set_low(&self) -> Result<bool, Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6363,"byte_end":6374,"line_start":221,"line_end":221,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn is_set_low(&self) -> Result<bool, Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6363,"byte_end":6374,"line_start":221,"line_end":221,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn is_set_low(&self) -> Result<bool, Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:221:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m221\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn is_set_low(&self) -> Result<bool, Self::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m221\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_set_low(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<ErasedPin<gpio::Output<MODE>> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m221\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_set_low(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<ErasedPin<gpio::Output<MODE>> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m221\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_set_low(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<ErasedPin<gpio::Output<MODE>> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m221\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_set_low(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<ErasedPin<gpio::Output<MODE>> as _embedded_hal_blocking_spi_Transfer>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m      and 6 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6539,"byte_end":6550,"line_start":228,"line_end":228,"column_start":40,"column_end":51,"is_primary":true,"text":[{"text":"    fn toggle(&mut self) -> Result<(), Self::Error> {","highlight_start":40,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6539,"byte_end":6550,"line_start":228,"line_end":228,"column_start":40,"column_end":51,"is_primary":true,"text":[{"text":"    fn toggle(&mut self) -> Result<(), Self::Error> {","highlight_start":40,"highlight_end":51}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6539,"byte_end":6550,"line_start":228,"line_end":228,"column_start":40,"column_end":51,"is_primary":true,"text":[{"text":"    fn toggle(&mut self) -> Result<(), Self::Error> {","highlight_start":40,"highlight_end":51}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6539,"byte_end":6550,"line_start":228,"line_end":228,"column_start":40,"column_end":51,"is_primary":true,"text":[{"text":"    fn toggle(&mut self) -> Result<(), Self::Error> {","highlight_start":40,"highlight_end":51}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6539,"byte_end":6550,"line_start":228,"line_end":228,"column_start":40,"column_end":51,"is_primary":true,"text":[{"text":"    fn toggle(&mut self) -> Result<(), Self::Error> {","highlight_start":40,"highlight_end":51}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6539,"byte_end":6550,"line_start":228,"line_end":228,"column_start":40,"column_end":51,"is_primary":true,"text":[{"text":"    fn toggle(&mut self) -> Result<(), Self::Error> {","highlight_start":40,"highlight_end":51}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6539,"byte_end":6550,"line_start":228,"line_end":228,"column_start":40,"column_end":51,"is_primary":true,"text":[{"text":"    fn toggle(&mut self) -> Result<(), Self::Error> {","highlight_start":40,"highlight_end":51}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6539,"byte_end":6550,"line_start":228,"line_end":228,"column_start":40,"column_end":51,"is_primary":true,"text":[{"text":"    fn toggle(&mut self) -> Result<(), Self::Error> {","highlight_start":40,"highlight_end":51}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6539,"byte_end":6550,"line_start":228,"line_end":228,"column_start":40,"column_end":51,"is_primary":true,"text":[{"text":"    fn toggle(&mut self) -> Result<(), Self::Error> {","highlight_start":40,"highlight_end":51}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6539,"byte_end":6550,"line_start":228,"line_end":228,"column_start":40,"column_end":51,"is_primary":true,"text":[{"text":"    fn toggle(&mut self) -> Result<(), Self::Error> {","highlight_start":40,"highlight_end":51}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6539,"byte_end":6550,"line_start":228,"line_end":228,"column_start":40,"column_end":51,"is_primary":true,"text":[{"text":"    fn toggle(&mut self) -> Result<(), Self::Error> {","highlight_start":40,"highlight_end":51}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Output<MODE>> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:228:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m228\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn toggle(&mut self) -> Result<(), Self::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m228\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn toggle(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<ErasedPin<gpio::Output<MODE>> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m228\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn toggle(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<ErasedPin<gpio::Output<MODE>> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m228\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn toggle(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<ErasedPin<gpio::Output<MODE>> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m228\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn toggle(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<ErasedPin<gpio::Output<MODE>> as _embedded_hal_blocking_spi_Transfer>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m      and 6 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6977,"byte_end":6988,"line_start":248,"line_end":248,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6977,"byte_end":6988,"line_start":248,"line_end":248,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Input<MODE>> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6977,"byte_end":6988,"line_start":248,"line_end":248,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Input<MODE>> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6977,"byte_end":6988,"line_start":248,"line_end":248,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Input<MODE>> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6977,"byte_end":6988,"line_start":248,"line_end":248,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Input<MODE>> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6977,"byte_end":6988,"line_start":248,"line_end":248,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Input<MODE>> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6977,"byte_end":6988,"line_start":248,"line_end":248,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Input<MODE>> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6977,"byte_end":6988,"line_start":248,"line_end":248,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Input<MODE>> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6977,"byte_end":6988,"line_start":248,"line_end":248,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Input<MODE>> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6977,"byte_end":6988,"line_start":248,"line_end":248,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Input<MODE>> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":6977,"byte_end":6988,"line_start":248,"line_end":248,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Input<MODE>> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:248:39\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m248\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn is_high(&self) -> Result<bool, Self::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m248\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_high(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<ErasedPin<gpio::Input<MODE>> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m248\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_high(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<ErasedPin<gpio::Input<MODE>> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m248\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_high(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<ErasedPin<gpio::Input<MODE>> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m248\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_high(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<ErasedPin<gpio::Input<MODE>> as _embedded_hal_blocking_spi_Transfer>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m      and 6 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7085,"byte_end":7096,"line_start":253,"line_end":253,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7085,"byte_end":7096,"line_start":253,"line_end":253,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Input<MODE>> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7085,"byte_end":7096,"line_start":253,"line_end":253,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Input<MODE>> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7085,"byte_end":7096,"line_start":253,"line_end":253,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Input<MODE>> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7085,"byte_end":7096,"line_start":253,"line_end":253,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Input<MODE>> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7085,"byte_end":7096,"line_start":253,"line_end":253,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Input<MODE>> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7085,"byte_end":7096,"line_start":253,"line_end":253,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Input<MODE>> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7085,"byte_end":7096,"line_start":253,"line_end":253,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Input<MODE>> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7085,"byte_end":7096,"line_start":253,"line_end":253,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Input<MODE>> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7085,"byte_end":7096,"line_start":253,"line_end":253,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Input<MODE>> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7085,"byte_end":7096,"line_start":253,"line_end":253,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<ErasedPin<gpio::Input<MODE>> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:253:38\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m253\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn is_low(&self) -> Result<bool, Self::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m253\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_low(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<ErasedPin<gpio::Input<MODE>> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m253\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_low(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<ErasedPin<gpio::Input<MODE>> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m253\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_low(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<ErasedPin<gpio::Input<MODE>> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m253\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_low(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<ErasedPin<gpio::Input<MODE>> as _embedded_hal_blocking_spi_Transfer>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m      and 6 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7422,"byte_end":7433,"line_start":265,"line_end":265,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn set_high(&mut self) -> Result<(), Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7422,"byte_end":7433,"line_start":265,"line_end":265,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn set_high(&mut self) -> Result<(), Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7422,"byte_end":7433,"line_start":265,"line_end":265,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn set_high(&mut self) -> Result<(), Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7422,"byte_end":7433,"line_start":265,"line_end":265,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn set_high(&mut self) -> Result<(), Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7422,"byte_end":7433,"line_start":265,"line_end":265,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn set_high(&mut self) -> Result<(), Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7422,"byte_end":7433,"line_start":265,"line_end":265,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn set_high(&mut self) -> Result<(), Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7422,"byte_end":7433,"line_start":265,"line_end":265,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn set_high(&mut self) -> Result<(), Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7422,"byte_end":7433,"line_start":265,"line_end":265,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn set_high(&mut self) -> Result<(), Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7422,"byte_end":7433,"line_start":265,"line_end":265,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn set_high(&mut self) -> Result<(), Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7422,"byte_end":7433,"line_start":265,"line_end":265,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn set_high(&mut self) -> Result<(), Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7422,"byte_end":7433,"line_start":265,"line_end":265,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn set_high(&mut self) -> Result<(), Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:265:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m265\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn set_high(&mut self) -> Result<(), Self::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m265\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn set_high(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<PartiallyErasedPin<gpio::Output<MODE>, P> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m265\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn set_high(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<PartiallyErasedPin<gpio::Output<MODE>, P> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m265\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn set_high(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<PartiallyErasedPin<gpio::Output<MODE>, P> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m265\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn set_high(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<PartiallyErasedPin<gpio::Output<MODE>, P> as _embedded_hal_blocking_spi_Transfer>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m      and 6 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7546,"byte_end":7557,"line_start":271,"line_end":271,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"    fn set_low(&mut self) -> Result<(), Self::Error> {","highlight_start":41,"highlight_end":52}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7546,"byte_end":7557,"line_start":271,"line_end":271,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"    fn set_low(&mut self) -> Result<(), Self::Error> {","highlight_start":41,"highlight_end":52}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7546,"byte_end":7557,"line_start":271,"line_end":271,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"    fn set_low(&mut self) -> Result<(), Self::Error> {","highlight_start":41,"highlight_end":52}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7546,"byte_end":7557,"line_start":271,"line_end":271,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"    fn set_low(&mut self) -> Result<(), Self::Error> {","highlight_start":41,"highlight_end":52}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7546,"byte_end":7557,"line_start":271,"line_end":271,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"    fn set_low(&mut self) -> Result<(), Self::Error> {","highlight_start":41,"highlight_end":52}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7546,"byte_end":7557,"line_start":271,"line_end":271,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"    fn set_low(&mut self) -> Result<(), Self::Error> {","highlight_start":41,"highlight_end":52}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7546,"byte_end":7557,"line_start":271,"line_end":271,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"    fn set_low(&mut self) -> Result<(), Self::Error> {","highlight_start":41,"highlight_end":52}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7546,"byte_end":7557,"line_start":271,"line_end":271,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"    fn set_low(&mut self) -> Result<(), Self::Error> {","highlight_start":41,"highlight_end":52}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7546,"byte_end":7557,"line_start":271,"line_end":271,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"    fn set_low(&mut self) -> Result<(), Self::Error> {","highlight_start":41,"highlight_end":52}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7546,"byte_end":7557,"line_start":271,"line_end":271,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"    fn set_low(&mut self) -> Result<(), Self::Error> {","highlight_start":41,"highlight_end":52}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7546,"byte_end":7557,"line_start":271,"line_end":271,"column_start":41,"column_end":52,"is_primary":true,"text":[{"text":"    fn set_low(&mut self) -> Result<(), Self::Error> {","highlight_start":41,"highlight_end":52}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:271:41\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m271\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn set_low(&mut self) -> Result<(), Self::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m271\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn set_low(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<PartiallyErasedPin<gpio::Output<MODE>, P> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m271\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn set_low(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<PartiallyErasedPin<gpio::Output<MODE>, P> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m271\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn set_low(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<PartiallyErasedPin<gpio::Output<MODE>, P> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m271\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn set_low(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<PartiallyErasedPin<gpio::Output<MODE>, P> as _embedded_hal_blocking_spi_Transfer>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m      and 6 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7759,"byte_end":7770,"line_start":279,"line_end":279,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"    fn is_set_high(&self) -> Result<bool, Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7759,"byte_end":7770,"line_start":279,"line_end":279,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"    fn is_set_high(&self) -> Result<bool, Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7759,"byte_end":7770,"line_start":279,"line_end":279,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"    fn is_set_high(&self) -> Result<bool, Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7759,"byte_end":7770,"line_start":279,"line_end":279,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"    fn is_set_high(&self) -> Result<bool, Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7759,"byte_end":7770,"line_start":279,"line_end":279,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"    fn is_set_high(&self) -> Result<bool, Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7759,"byte_end":7770,"line_start":279,"line_end":279,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"    fn is_set_high(&self) -> Result<bool, Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7759,"byte_end":7770,"line_start":279,"line_end":279,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"    fn is_set_high(&self) -> Result<bool, Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7759,"byte_end":7770,"line_start":279,"line_end":279,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"    fn is_set_high(&self) -> Result<bool, Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7759,"byte_end":7770,"line_start":279,"line_end":279,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"    fn is_set_high(&self) -> Result<bool, Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7759,"byte_end":7770,"line_start":279,"line_end":279,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"    fn is_set_high(&self) -> Result<bool, Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7759,"byte_end":7770,"line_start":279,"line_end":279,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"    fn is_set_high(&self) -> Result<bool, Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:279:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m279\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn is_set_high(&self) -> Result<bool, Self::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m279\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_set_high(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<PartiallyErasedPin<gpio::Output<MODE>, P> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m279\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_set_high(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<PartiallyErasedPin<gpio::Output<MODE>, P> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m279\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_set_high(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<PartiallyErasedPin<gpio::Output<MODE>, P> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m279\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_set_high(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<PartiallyErasedPin<gpio::Output<MODE>, P> as _embedded_hal_blocking_spi_Transfer>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m      and 6 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7875,"byte_end":7886,"line_start":284,"line_end":284,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn is_set_low(&self) -> Result<bool, Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7875,"byte_end":7886,"line_start":284,"line_end":284,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn is_set_low(&self) -> Result<bool, Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7875,"byte_end":7886,"line_start":284,"line_end":284,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn is_set_low(&self) -> Result<bool, Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7875,"byte_end":7886,"line_start":284,"line_end":284,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn is_set_low(&self) -> Result<bool, Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7875,"byte_end":7886,"line_start":284,"line_end":284,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn is_set_low(&self) -> Result<bool, Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7875,"byte_end":7886,"line_start":284,"line_end":284,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn is_set_low(&self) -> Result<bool, Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7875,"byte_end":7886,"line_start":284,"line_end":284,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn is_set_low(&self) -> Result<bool, Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7875,"byte_end":7886,"line_start":284,"line_end":284,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn is_set_low(&self) -> Result<bool, Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7875,"byte_end":7886,"line_start":284,"line_end":284,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn is_set_low(&self) -> Result<bool, Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7875,"byte_end":7886,"line_start":284,"line_end":284,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn is_set_low(&self) -> Result<bool, Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":7875,"byte_end":7886,"line_start":284,"line_end":284,"column_start":42,"column_end":53,"is_primary":true,"text":[{"text":"    fn is_set_low(&self) -> Result<bool, Self::Error> {","highlight_start":42,"highlight_end":53}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:284:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m284\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn is_set_low(&self) -> Result<bool, Self::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m284\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_set_low(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<PartiallyErasedPin<gpio::Output<MODE>, P> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m284\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_set_low(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<PartiallyErasedPin<gpio::Output<MODE>, P> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m284\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_set_low(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<PartiallyErasedPin<gpio::Output<MODE>, P> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m284\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_set_low(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<PartiallyErasedPin<gpio::Output<MODE>, P> as _embedded_hal_blocking_spi_Transfer>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                          \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m      and 6 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8078,"byte_end":8089,"line_start":291,"line_end":291,"column_start":40,"column_end":51,"is_primary":true,"text":[{"text":"    fn toggle(&mut self) -> Result<(), Self::Error> {","highlight_start":40,"highlight_end":51}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8078,"byte_end":8089,"line_start":291,"line_end":291,"column_start":40,"column_end":51,"is_primary":true,"text":[{"text":"    fn toggle(&mut self) -> Result<(), Self::Error> {","highlight_start":40,"highlight_end":51}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8078,"byte_end":8089,"line_start":291,"line_end":291,"column_start":40,"column_end":51,"is_primary":true,"text":[{"text":"    fn toggle(&mut self) -> Result<(), Self::Error> {","highlight_start":40,"highlight_end":51}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8078,"byte_end":8089,"line_start":291,"line_end":291,"column_start":40,"column_end":51,"is_primary":true,"text":[{"text":"    fn toggle(&mut self) -> Result<(), Self::Error> {","highlight_start":40,"highlight_end":51}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8078,"byte_end":8089,"line_start":291,"line_end":291,"column_start":40,"column_end":51,"is_primary":true,"text":[{"text":"    fn toggle(&mut self) -> Result<(), Self::Error> {","highlight_start":40,"highlight_end":51}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8078,"byte_end":8089,"line_start":291,"line_end":291,"column_start":40,"column_end":51,"is_primary":true,"text":[{"text":"    fn toggle(&mut self) -> Result<(), Self::Error> {","highlight_start":40,"highlight_end":51}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8078,"byte_end":8089,"line_start":291,"line_end":291,"column_start":40,"column_end":51,"is_primary":true,"text":[{"text":"    fn toggle(&mut self) -> Result<(), Self::Error> {","highlight_start":40,"highlight_end":51}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8078,"byte_end":8089,"line_start":291,"line_end":291,"column_start":40,"column_end":51,"is_primary":true,"text":[{"text":"    fn toggle(&mut self) -> Result<(), Self::Error> {","highlight_start":40,"highlight_end":51}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8078,"byte_end":8089,"line_start":291,"line_end":291,"column_start":40,"column_end":51,"is_primary":true,"text":[{"text":"    fn toggle(&mut self) -> Result<(), Self::Error> {","highlight_start":40,"highlight_end":51}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8078,"byte_end":8089,"line_start":291,"line_end":291,"column_start":40,"column_end":51,"is_primary":true,"text":[{"text":"    fn toggle(&mut self) -> Result<(), Self::Error> {","highlight_start":40,"highlight_end":51}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8078,"byte_end":8089,"line_start":291,"line_end":291,"column_start":40,"column_end":51,"is_primary":true,"text":[{"text":"    fn toggle(&mut self) -> Result<(), Self::Error> {","highlight_start":40,"highlight_end":51}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<MODE>, P> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:291:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m291\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn toggle(&mut self) -> Result<(), Self::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m291\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn toggle(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<PartiallyErasedPin<gpio::Output<MODE>, P> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m291\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn toggle(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<PartiallyErasedPin<gpio::Output<MODE>, P> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m291\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn toggle(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<PartiallyErasedPin<gpio::Output<MODE>, P> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m291\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn toggle(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<PartiallyErasedPin<gpio::Output<MODE>, P> as _embedded_hal_blocking_spi_Transfer>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                        \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m      and 6 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8276,"byte_end":8287,"line_start":299,"line_end":299,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8276,"byte_end":8287,"line_start":299,"line_end":299,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<gpio::OpenDrain>, P> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8276,"byte_end":8287,"line_start":299,"line_end":299,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<gpio::OpenDrain>, P> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8276,"byte_end":8287,"line_start":299,"line_end":299,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<gpio::OpenDrain>, P> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8276,"byte_end":8287,"line_start":299,"line_end":299,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<gpio::OpenDrain>, P> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8276,"byte_end":8287,"line_start":299,"line_end":299,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<gpio::OpenDrain>, P> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8276,"byte_end":8287,"line_start":299,"line_end":299,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<gpio::OpenDrain>, P> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8276,"byte_end":8287,"line_start":299,"line_end":299,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<gpio::OpenDrain>, P> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8276,"byte_end":8287,"line_start":299,"line_end":299,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<gpio::OpenDrain>, P> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8276,"byte_end":8287,"line_start":299,"line_end":299,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<gpio::OpenDrain>, P> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8276,"byte_end":8287,"line_start":299,"line_end":299,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<gpio::OpenDrain>, P> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:299:39\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m299\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn is_high(&self) -> Result<bool, Self::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m299\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_high(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<PartiallyErasedPin<gpio::Output<gpio::OpenDrain>, P> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m299\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_high(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<PartiallyErasedPin<gpio::Output<gpio::OpenDrain>, P> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m299\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_high(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<PartiallyErasedPin<gpio::Output<gpio::OpenDrain>, P> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m299\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_high(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<PartiallyErasedPin<gpio::Output<gpio::OpenDrain>, P> as _embedded_hal_blocking_spi_Transfer>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m      and 6 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8384,"byte_end":8395,"line_start":304,"line_end":304,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8384,"byte_end":8395,"line_start":304,"line_end":304,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<gpio::OpenDrain>, P> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8384,"byte_end":8395,"line_start":304,"line_end":304,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<gpio::OpenDrain>, P> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8384,"byte_end":8395,"line_start":304,"line_end":304,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<gpio::OpenDrain>, P> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8384,"byte_end":8395,"line_start":304,"line_end":304,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<gpio::OpenDrain>, P> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8384,"byte_end":8395,"line_start":304,"line_end":304,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<gpio::OpenDrain>, P> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8384,"byte_end":8395,"line_start":304,"line_end":304,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<gpio::OpenDrain>, P> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8384,"byte_end":8395,"line_start":304,"line_end":304,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<gpio::OpenDrain>, P> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8384,"byte_end":8395,"line_start":304,"line_end":304,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<gpio::OpenDrain>, P> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8384,"byte_end":8395,"line_start":304,"line_end":304,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<gpio::OpenDrain>, P> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8384,"byte_end":8395,"line_start":304,"line_end":304,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Output<gpio::OpenDrain>, P> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:304:38\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m304\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn is_low(&self) -> Result<bool, Self::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m304\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_low(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<PartiallyErasedPin<gpio::Output<gpio::OpenDrain>, P> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m304\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_low(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<PartiallyErasedPin<gpio::Output<gpio::OpenDrain>, P> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m304\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_low(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<PartiallyErasedPin<gpio::Output<gpio::OpenDrain>, P> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m304\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_low(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<PartiallyErasedPin<gpio::Output<gpio::OpenDrain>, P> as _embedded_hal_blocking_spi_Transfer>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m      and 6 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8570,"byte_end":8581,"line_start":311,"line_end":311,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8570,"byte_end":8581,"line_start":311,"line_end":311,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Input<MODE>, P> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8570,"byte_end":8581,"line_start":311,"line_end":311,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Input<MODE>, P> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8570,"byte_end":8581,"line_start":311,"line_end":311,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Input<MODE>, P> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8570,"byte_end":8581,"line_start":311,"line_end":311,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Input<MODE>, P> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8570,"byte_end":8581,"line_start":311,"line_end":311,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Input<MODE>, P> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8570,"byte_end":8581,"line_start":311,"line_end":311,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Input<MODE>, P> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8570,"byte_end":8581,"line_start":311,"line_end":311,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Input<MODE>, P> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8570,"byte_end":8581,"line_start":311,"line_end":311,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Input<MODE>, P> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8570,"byte_end":8581,"line_start":311,"line_end":311,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Input<MODE>, P> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8570,"byte_end":8581,"line_start":311,"line_end":311,"column_start":39,"column_end":50,"is_primary":true,"text":[{"text":"    fn is_high(&self) -> Result<bool, Self::Error> {","highlight_start":39,"highlight_end":50}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Input<MODE>, P> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:311:39\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m311\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn is_high(&self) -> Result<bool, Self::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m311\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_high(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<PartiallyErasedPin<gpio::Input<MODE>, P> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m311\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_high(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<PartiallyErasedPin<gpio::Input<MODE>, P> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m311\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_high(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<PartiallyErasedPin<gpio::Input<MODE>, P> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m311\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_high(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<PartiallyErasedPin<gpio::Input<MODE>, P> as _embedded_hal_blocking_spi_Transfer>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m      and 6 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8678,"byte_end":8689,"line_start":316,"line_end":316,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8678,"byte_end":8689,"line_start":316,"line_end":316,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Input<MODE>, P> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8678,"byte_end":8689,"line_start":316,"line_end":316,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Input<MODE>, P> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8678,"byte_end":8689,"line_start":316,"line_end":316,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Input<MODE>, P> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8678,"byte_end":8689,"line_start":316,"line_end":316,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Input<MODE>, P> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8678,"byte_end":8689,"line_start":316,"line_end":316,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Input<MODE>, P> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8678,"byte_end":8689,"line_start":316,"line_end":316,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Input<MODE>, P> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8678,"byte_end":8689,"line_start":316,"line_end":316,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Input<MODE>, P> as embedded_hal::digital::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8678,"byte_end":8689,"line_start":316,"line_end":316,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Input<MODE>, P> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8678,"byte_end":8689,"line_start":316,"line_end":316,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Input<MODE>, P> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs","byte_start":8678,"byte_end":8689,"line_start":316,"line_end":316,"column_start":38,"column_end":49,"is_primary":true,"text":[{"text":"    fn is_low(&self) -> Result<bool, Self::Error> {","highlight_start":38,"highlight_end":49}],"label":null,"suggested_replacement":"<PartiallyErasedPin<gpio::Input<MODE>, P> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\gpio\\hal_1.rs:316:38\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m316\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn is_low(&self) -> Result<bool, Self::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m316\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_low(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<PartiallyErasedPin<gpio::Input<MODE>, P> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m316\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_low(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<PartiallyErasedPin<gpio::Input<MODE>, P> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m316\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_low(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<PartiallyErasedPin<gpio::Input<MODE>, P> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m316\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn is_low(&self) -> Result<bool, \u001b[0m\u001b[0m\u001b[38;5;10m<PartiallyErasedPin<gpio::Input<MODE>, P> as _embedded_hal_blocking_spi_Transfer>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                      \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m      and 6 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":821,"byte_end":832,"line_start":24,"line_end":24,"column_start":71,"column_end":82,"is_primary":true,"text":[{"text":"        fn read(&mut self, addr: u8, buffer: &mut [u8]) -> Result<(), Self::Error> {","highlight_start":71,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":821,"byte_end":832,"line_start":24,"line_end":24,"column_start":71,"column_end":82,"is_primary":true,"text":[{"text":"        fn read(&mut self, addr: u8, buffer: &mut [u8]) -> Result<(), Self::Error> {","highlight_start":71,"highlight_end":82}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":821,"byte_end":832,"line_start":24,"line_end":24,"column_start":71,"column_end":82,"is_primary":true,"text":[{"text":"        fn read(&mut self, addr: u8, buffer: &mut [u8]) -> Result<(), Self::Error> {","highlight_start":71,"highlight_end":82}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":821,"byte_end":832,"line_start":24,"line_end":24,"column_start":71,"column_end":82,"is_primary":true,"text":[{"text":"        fn read(&mut self, addr: u8, buffer: &mut [u8]) -> Result<(), Self::Error> {","highlight_start":71,"highlight_end":82}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as WriteIterRead>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":821,"byte_end":832,"line_start":24,"line_end":24,"column_start":71,"column_end":82,"is_primary":true,"text":[{"text":"        fn read(&mut self, addr: u8, buffer: &mut [u8]) -> Result<(), Self::Error> {","highlight_start":71,"highlight_end":82}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as WriteRead>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":821,"byte_end":832,"line_start":24,"line_end":24,"column_start":71,"column_end":82,"is_primary":true,"text":[{"text":"        fn read(&mut self, addr: u8, buffer: &mut [u8]) -> Result<(), Self::Error> {","highlight_start":71,"highlight_end":82}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as _embedded_hal_blocking_i2c_Read>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":821,"byte_end":832,"line_start":24,"line_end":24,"column_start":71,"column_end":82,"is_primary":true,"text":[{"text":"        fn read(&mut self, addr: u8, buffer: &mut [u8]) -> Result<(), Self::Error> {","highlight_start":71,"highlight_end":82}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as _embedded_hal_blocking_i2c_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":821,"byte_end":832,"line_start":24,"line_end":24,"column_start":71,"column_end":82,"is_primary":true,"text":[{"text":"        fn read(&mut self, addr: u8, buffer: &mut [u8]) -> Result<(), Self::Error> {","highlight_start":71,"highlight_end":82}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":821,"byte_end":832,"line_start":24,"line_end":24,"column_start":71,"column_end":82,"is_primary":true,"text":[{"text":"        fn read(&mut self, addr: u8, buffer: &mut [u8]) -> Result<(), Self::Error> {","highlight_start":71,"highlight_end":82}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":821,"byte_end":832,"line_start":24,"line_end":24,"column_start":71,"column_end":82,"is_primary":true,"text":[{"text":"        fn read(&mut self, addr: u8, buffer: &mut [u8]) -> Result<(), Self::Error> {","highlight_start":71,"highlight_end":82}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":821,"byte_end":832,"line_start":24,"line_end":24,"column_start":71,"column_end":82,"is_primary":true,"text":[{"text":"        fn read(&mut self, addr: u8, buffer: &mut [u8]) -> Result<(), Self::Error> {","highlight_start":71,"highlight_end":82}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::blocking::i2c::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":821,"byte_end":832,"line_start":24,"line_end":24,"column_start":71,"column_end":82,"is_primary":true,"text":[{"text":"        fn read(&mut self, addr: u8, buffer: &mut [u8]) -> Result<(), Self::Error> {","highlight_start":71,"highlight_end":82}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":821,"byte_end":832,"line_start":24,"line_end":24,"column_start":71,"column_end":82,"is_primary":true,"text":[{"text":"        fn read(&mut self, addr: u8, buffer: &mut [u8]) -> Result<(), Self::Error> {","highlight_start":71,"highlight_end":82}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":821,"byte_end":832,"line_start":24,"line_end":24,"column_start":71,"column_end":82,"is_primary":true,"text":[{"text":"        fn read(&mut self, addr: u8, buffer: &mut [u8]) -> Result<(), Self::Error> {","highlight_start":71,"highlight_end":82}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":821,"byte_end":832,"line_start":24,"line_end":24,"column_start":71,"column_end":82,"is_primary":true,"text":[{"text":"        fn read(&mut self, addr: u8, buffer: &mut [u8]) -> Result<(), Self::Error> {","highlight_start":71,"highlight_end":82}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":821,"byte_end":832,"line_start":24,"line_end":24,"column_start":71,"column_end":82,"is_primary":true,"text":[{"text":"        fn read(&mut self, addr: u8, buffer: &mut [u8]) -> Result<(), Self::Error> {","highlight_start":71,"highlight_end":82}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::i2c::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs:24:71\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        fn read(&mut self, addr: u8, buffer: &mut [u8]) -> Result<(), Self::Error> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn read(&mut self, addr: u8, buffer: &mut [u8]) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<i2c::I2c<I2C, PINS> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                       \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn read(&mut self, addr: u8, buffer: &mut [u8]) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<i2c::I2c<I2C, PINS> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                       \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn read(&mut self, addr: u8, buffer: &mut [u8]) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<i2c::I2c<I2C, PINS> as WriteIterRead>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                       \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m24\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn read(&mut self, addr: u8, buffer: &mut [u8]) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<i2c::I2c<I2C, PINS> as WriteRead>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                       \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m     and 11 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":949,"byte_end":960,"line_start":28,"line_end":28,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"        fn write(&mut self, addr: u8, bytes: &[u8]) -> Result<(), Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":949,"byte_end":960,"line_start":28,"line_end":28,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"        fn write(&mut self, addr: u8, bytes: &[u8]) -> Result<(), Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":949,"byte_end":960,"line_start":28,"line_end":28,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"        fn write(&mut self, addr: u8, bytes: &[u8]) -> Result<(), Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":949,"byte_end":960,"line_start":28,"line_end":28,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"        fn write(&mut self, addr: u8, bytes: &[u8]) -> Result<(), Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as WriteIterRead>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":949,"byte_end":960,"line_start":28,"line_end":28,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"        fn write(&mut self, addr: u8, bytes: &[u8]) -> Result<(), Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as WriteRead>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":949,"byte_end":960,"line_start":28,"line_end":28,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"        fn write(&mut self, addr: u8, bytes: &[u8]) -> Result<(), Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as _embedded_hal_blocking_i2c_Read>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":949,"byte_end":960,"line_start":28,"line_end":28,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"        fn write(&mut self, addr: u8, bytes: &[u8]) -> Result<(), Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as _embedded_hal_blocking_i2c_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":949,"byte_end":960,"line_start":28,"line_end":28,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"        fn write(&mut self, addr: u8, bytes: &[u8]) -> Result<(), Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":949,"byte_end":960,"line_start":28,"line_end":28,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"        fn write(&mut self, addr: u8, bytes: &[u8]) -> Result<(), Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":949,"byte_end":960,"line_start":28,"line_end":28,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"        fn write(&mut self, addr: u8, bytes: &[u8]) -> Result<(), Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":949,"byte_end":960,"line_start":28,"line_end":28,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"        fn write(&mut self, addr: u8, bytes: &[u8]) -> Result<(), Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::blocking::i2c::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":949,"byte_end":960,"line_start":28,"line_end":28,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"        fn write(&mut self, addr: u8, bytes: &[u8]) -> Result<(), Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":949,"byte_end":960,"line_start":28,"line_end":28,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"        fn write(&mut self, addr: u8, bytes: &[u8]) -> Result<(), Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":949,"byte_end":960,"line_start":28,"line_end":28,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"        fn write(&mut self, addr: u8, bytes: &[u8]) -> Result<(), Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":949,"byte_end":960,"line_start":28,"line_end":28,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"        fn write(&mut self, addr: u8, bytes: &[u8]) -> Result<(), Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":949,"byte_end":960,"line_start":28,"line_end":28,"column_start":67,"column_end":78,"is_primary":true,"text":[{"text":"        fn write(&mut self, addr: u8, bytes: &[u8]) -> Result<(), Self::Error> {","highlight_start":67,"highlight_end":78}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::i2c::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs:28:67\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        fn write(&mut self, addr: u8, bytes: &[u8]) -> Result<(), Self::Error> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write(&mut self, addr: u8, bytes: &[u8]) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<i2c::I2c<I2C, PINS> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write(&mut self, addr: u8, bytes: &[u8]) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<i2c::I2c<I2C, PINS> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write(&mut self, addr: u8, bytes: &[u8]) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<i2c::I2c<I2C, PINS> as WriteIterRead>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write(&mut self, addr: u8, bytes: &[u8]) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<i2c::I2c<I2C, PINS> as WriteRead>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m     and 11 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1081,"byte_end":1092,"line_start":32,"line_end":32,"column_start":71,"column_end":82,"is_primary":true,"text":[{"text":"        fn write_iter<B>(&mut self, addr: u8, bytes: B) -> Result<(), Self::Error>","highlight_start":71,"highlight_end":82}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1081,"byte_end":1092,"line_start":32,"line_end":32,"column_start":71,"column_end":82,"is_primary":true,"text":[{"text":"        fn write_iter<B>(&mut self, addr: u8, bytes: B) -> Result<(), Self::Error>","highlight_start":71,"highlight_end":82}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1081,"byte_end":1092,"line_start":32,"line_end":32,"column_start":71,"column_end":82,"is_primary":true,"text":[{"text":"        fn write_iter<B>(&mut self, addr: u8, bytes: B) -> Result<(), Self::Error>","highlight_start":71,"highlight_end":82}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1081,"byte_end":1092,"line_start":32,"line_end":32,"column_start":71,"column_end":82,"is_primary":true,"text":[{"text":"        fn write_iter<B>(&mut self, addr: u8, bytes: B) -> Result<(), Self::Error>","highlight_start":71,"highlight_end":82}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as WriteIterRead>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1081,"byte_end":1092,"line_start":32,"line_end":32,"column_start":71,"column_end":82,"is_primary":true,"text":[{"text":"        fn write_iter<B>(&mut self, addr: u8, bytes: B) -> Result<(), Self::Error>","highlight_start":71,"highlight_end":82}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as WriteRead>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1081,"byte_end":1092,"line_start":32,"line_end":32,"column_start":71,"column_end":82,"is_primary":true,"text":[{"text":"        fn write_iter<B>(&mut self, addr: u8, bytes: B) -> Result<(), Self::Error>","highlight_start":71,"highlight_end":82}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as _embedded_hal_blocking_i2c_Read>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1081,"byte_end":1092,"line_start":32,"line_end":32,"column_start":71,"column_end":82,"is_primary":true,"text":[{"text":"        fn write_iter<B>(&mut self, addr: u8, bytes: B) -> Result<(), Self::Error>","highlight_start":71,"highlight_end":82}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as _embedded_hal_blocking_i2c_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1081,"byte_end":1092,"line_start":32,"line_end":32,"column_start":71,"column_end":82,"is_primary":true,"text":[{"text":"        fn write_iter<B>(&mut self, addr: u8, bytes: B) -> Result<(), Self::Error>","highlight_start":71,"highlight_end":82}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1081,"byte_end":1092,"line_start":32,"line_end":32,"column_start":71,"column_end":82,"is_primary":true,"text":[{"text":"        fn write_iter<B>(&mut self, addr: u8, bytes: B) -> Result<(), Self::Error>","highlight_start":71,"highlight_end":82}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1081,"byte_end":1092,"line_start":32,"line_end":32,"column_start":71,"column_end":82,"is_primary":true,"text":[{"text":"        fn write_iter<B>(&mut self, addr: u8, bytes: B) -> Result<(), Self::Error>","highlight_start":71,"highlight_end":82}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1081,"byte_end":1092,"line_start":32,"line_end":32,"column_start":71,"column_end":82,"is_primary":true,"text":[{"text":"        fn write_iter<B>(&mut self, addr: u8, bytes: B) -> Result<(), Self::Error>","highlight_start":71,"highlight_end":82}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::blocking::i2c::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1081,"byte_end":1092,"line_start":32,"line_end":32,"column_start":71,"column_end":82,"is_primary":true,"text":[{"text":"        fn write_iter<B>(&mut self, addr: u8, bytes: B) -> Result<(), Self::Error>","highlight_start":71,"highlight_end":82}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1081,"byte_end":1092,"line_start":32,"line_end":32,"column_start":71,"column_end":82,"is_primary":true,"text":[{"text":"        fn write_iter<B>(&mut self, addr: u8, bytes: B) -> Result<(), Self::Error>","highlight_start":71,"highlight_end":82}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1081,"byte_end":1092,"line_start":32,"line_end":32,"column_start":71,"column_end":82,"is_primary":true,"text":[{"text":"        fn write_iter<B>(&mut self, addr: u8, bytes: B) -> Result<(), Self::Error>","highlight_start":71,"highlight_end":82}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1081,"byte_end":1092,"line_start":32,"line_end":32,"column_start":71,"column_end":82,"is_primary":true,"text":[{"text":"        fn write_iter<B>(&mut self, addr: u8, bytes: B) -> Result<(), Self::Error>","highlight_start":71,"highlight_end":82}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1081,"byte_end":1092,"line_start":32,"line_end":32,"column_start":71,"column_end":82,"is_primary":true,"text":[{"text":"        fn write_iter<B>(&mut self, addr: u8, bytes: B) -> Result<(), Self::Error>","highlight_start":71,"highlight_end":82}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::i2c::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs:32:71\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        fn write_iter<B>(&mut self, addr: u8, bytes: B) -> Result<(), Self::Error>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write_iter<B>(&mut self, addr: u8, bytes: B) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<i2c::I2c<I2C, PINS> as TryFrom>::Error\u001b[0m\u001b[0m>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                       \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write_iter<B>(&mut self, addr: u8, bytes: B) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<i2c::I2c<I2C, PINS> as TryInto>::Error\u001b[0m\u001b[0m>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                       \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write_iter<B>(&mut self, addr: u8, bytes: B) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<i2c::I2c<I2C, PINS> as WriteIterRead>::Error\u001b[0m\u001b[0m>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                       \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m32\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write_iter<B>(&mut self, addr: u8, bytes: B) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<i2c::I2c<I2C, PINS> as WriteRead>::Error\u001b[0m\u001b[0m>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                       \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m     and 11 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1359,"byte_end":1370,"line_start":44,"line_end":44,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error> {","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1359,"byte_end":1370,"line_start":44,"line_end":44,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error> {","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1359,"byte_end":1370,"line_start":44,"line_end":44,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error> {","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1359,"byte_end":1370,"line_start":44,"line_end":44,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error> {","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as WriteIterRead>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1359,"byte_end":1370,"line_start":44,"line_end":44,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error> {","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as WriteRead>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1359,"byte_end":1370,"line_start":44,"line_end":44,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error> {","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as _embedded_hal_blocking_i2c_Read>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1359,"byte_end":1370,"line_start":44,"line_end":44,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error> {","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as _embedded_hal_blocking_i2c_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1359,"byte_end":1370,"line_start":44,"line_end":44,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error> {","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1359,"byte_end":1370,"line_start":44,"line_end":44,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error> {","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1359,"byte_end":1370,"line_start":44,"line_end":44,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error> {","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1359,"byte_end":1370,"line_start":44,"line_end":44,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error> {","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::blocking::i2c::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1359,"byte_end":1370,"line_start":44,"line_end":44,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error> {","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1359,"byte_end":1370,"line_start":44,"line_end":44,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error> {","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1359,"byte_end":1370,"line_start":44,"line_end":44,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error> {","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1359,"byte_end":1370,"line_start":44,"line_end":44,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error> {","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1359,"byte_end":1370,"line_start":44,"line_end":44,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error> {","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::i2c::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs:44:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ) -> Result<(), Self::Error> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        ) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<i2c::I2c<I2C, PINS> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        ) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<i2c::I2c<I2C, PINS> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        ) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<i2c::I2c<I2C, PINS> as WriteIterRead>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        ) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<i2c::I2c<I2C, PINS> as WriteRead>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m     and 11 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1587,"byte_end":1598,"line_start":53,"line_end":53,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error>","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1587,"byte_end":1598,"line_start":53,"line_end":53,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error>","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1587,"byte_end":1598,"line_start":53,"line_end":53,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error>","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1587,"byte_end":1598,"line_start":53,"line_end":53,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error>","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as WriteIterRead>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1587,"byte_end":1598,"line_start":53,"line_end":53,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error>","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as WriteRead>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1587,"byte_end":1598,"line_start":53,"line_end":53,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error>","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as _embedded_hal_blocking_i2c_Read>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1587,"byte_end":1598,"line_start":53,"line_end":53,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error>","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as _embedded_hal_blocking_i2c_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1587,"byte_end":1598,"line_start":53,"line_end":53,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error>","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1587,"byte_end":1598,"line_start":53,"line_end":53,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error>","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1587,"byte_end":1598,"line_start":53,"line_end":53,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error>","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1587,"byte_end":1598,"line_start":53,"line_end":53,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error>","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::blocking::i2c::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1587,"byte_end":1598,"line_start":53,"line_end":53,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error>","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1587,"byte_end":1598,"line_start":53,"line_end":53,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error>","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1587,"byte_end":1598,"line_start":53,"line_end":53,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error>","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1587,"byte_end":1598,"line_start":53,"line_end":53,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error>","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1587,"byte_end":1598,"line_start":53,"line_end":53,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error>","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::i2c::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs:53:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ) -> Result<(), Self::Error>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        ) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<i2c::I2c<I2C, PINS> as TryFrom>::Error\u001b[0m\u001b[0m>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        ) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<i2c::I2c<I2C, PINS> as TryInto>::Error\u001b[0m\u001b[0m>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        ) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<i2c::I2c<I2C, PINS> as WriteIterRead>::Error\u001b[0m\u001b[0m>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m53\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        ) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<i2c::I2c<I2C, PINS> as WriteRead>::Error\u001b[0m\u001b[0m>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m     and 11 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1874,"byte_end":1885,"line_start":64,"line_end":64,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error> {","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1874,"byte_end":1885,"line_start":64,"line_end":64,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error> {","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1874,"byte_end":1885,"line_start":64,"line_end":64,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error> {","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1874,"byte_end":1885,"line_start":64,"line_end":64,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error> {","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as WriteIterRead>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1874,"byte_end":1885,"line_start":64,"line_end":64,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error> {","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as WriteRead>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1874,"byte_end":1885,"line_start":64,"line_end":64,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error> {","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as _embedded_hal_blocking_i2c_Read>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1874,"byte_end":1885,"line_start":64,"line_end":64,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error> {","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as _embedded_hal_blocking_i2c_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1874,"byte_end":1885,"line_start":64,"line_end":64,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error> {","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1874,"byte_end":1885,"line_start":64,"line_end":64,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error> {","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1874,"byte_end":1885,"line_start":64,"line_end":64,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error> {","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1874,"byte_end":1885,"line_start":64,"line_end":64,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error> {","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::blocking::i2c::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1874,"byte_end":1885,"line_start":64,"line_end":64,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error> {","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1874,"byte_end":1885,"line_start":64,"line_end":64,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error> {","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1874,"byte_end":1885,"line_start":64,"line_end":64,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error> {","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1874,"byte_end":1885,"line_start":64,"line_end":64,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error> {","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":1874,"byte_end":1885,"line_start":64,"line_end":64,"column_start":25,"column_end":36,"is_primary":true,"text":[{"text":"        ) -> Result<(), Self::Error> {","highlight_start":25,"highlight_end":36}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::i2c::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs:64:25\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        ) -> Result<(), Self::Error> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        ) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<i2c::I2c<I2C, PINS> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        ) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<i2c::I2c<I2C, PINS> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        ) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<i2c::I2c<I2C, PINS> as WriteIterRead>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        ) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<i2c::I2c<I2C, PINS> as WriteRead>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m     and 11 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":2007,"byte_end":2018,"line_start":68,"line_end":68,"column_start":88,"column_end":99,"is_primary":true,"text":[{"text":"        fn transaction_iter<'a, O>(&mut self, _addr: u8, _operations: O) -> Result<(), Self::Error>","highlight_start":88,"highlight_end":99}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":2007,"byte_end":2018,"line_start":68,"line_end":68,"column_start":88,"column_end":99,"is_primary":true,"text":[{"text":"        fn transaction_iter<'a, O>(&mut self, _addr: u8, _operations: O) -> Result<(), Self::Error>","highlight_start":88,"highlight_end":99}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":2007,"byte_end":2018,"line_start":68,"line_end":68,"column_start":88,"column_end":99,"is_primary":true,"text":[{"text":"        fn transaction_iter<'a, O>(&mut self, _addr: u8, _operations: O) -> Result<(), Self::Error>","highlight_start":88,"highlight_end":99}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":2007,"byte_end":2018,"line_start":68,"line_end":68,"column_start":88,"column_end":99,"is_primary":true,"text":[{"text":"        fn transaction_iter<'a, O>(&mut self, _addr: u8, _operations: O) -> Result<(), Self::Error>","highlight_start":88,"highlight_end":99}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as WriteIterRead>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":2007,"byte_end":2018,"line_start":68,"line_end":68,"column_start":88,"column_end":99,"is_primary":true,"text":[{"text":"        fn transaction_iter<'a, O>(&mut self, _addr: u8, _operations: O) -> Result<(), Self::Error>","highlight_start":88,"highlight_end":99}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as WriteRead>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":2007,"byte_end":2018,"line_start":68,"line_end":68,"column_start":88,"column_end":99,"is_primary":true,"text":[{"text":"        fn transaction_iter<'a, O>(&mut self, _addr: u8, _operations: O) -> Result<(), Self::Error>","highlight_start":88,"highlight_end":99}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as _embedded_hal_blocking_i2c_Read>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":2007,"byte_end":2018,"line_start":68,"line_end":68,"column_start":88,"column_end":99,"is_primary":true,"text":[{"text":"        fn transaction_iter<'a, O>(&mut self, _addr: u8, _operations: O) -> Result<(), Self::Error>","highlight_start":88,"highlight_end":99}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as _embedded_hal_blocking_i2c_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":2007,"byte_end":2018,"line_start":68,"line_end":68,"column_start":88,"column_end":99,"is_primary":true,"text":[{"text":"        fn transaction_iter<'a, O>(&mut self, _addr: u8, _operations: O) -> Result<(), Self::Error>","highlight_start":88,"highlight_end":99}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":2007,"byte_end":2018,"line_start":68,"line_end":68,"column_start":88,"column_end":99,"is_primary":true,"text":[{"text":"        fn transaction_iter<'a, O>(&mut self, _addr: u8, _operations: O) -> Result<(), Self::Error>","highlight_start":88,"highlight_end":99}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":2007,"byte_end":2018,"line_start":68,"line_end":68,"column_start":88,"column_end":99,"is_primary":true,"text":[{"text":"        fn transaction_iter<'a, O>(&mut self, _addr: u8, _operations: O) -> Result<(), Self::Error>","highlight_start":88,"highlight_end":99}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":2007,"byte_end":2018,"line_start":68,"line_end":68,"column_start":88,"column_end":99,"is_primary":true,"text":[{"text":"        fn transaction_iter<'a, O>(&mut self, _addr: u8, _operations: O) -> Result<(), Self::Error>","highlight_start":88,"highlight_end":99}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::blocking::i2c::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":2007,"byte_end":2018,"line_start":68,"line_end":68,"column_start":88,"column_end":99,"is_primary":true,"text":[{"text":"        fn transaction_iter<'a, O>(&mut self, _addr: u8, _operations: O) -> Result<(), Self::Error>","highlight_start":88,"highlight_end":99}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":2007,"byte_end":2018,"line_start":68,"line_end":68,"column_start":88,"column_end":99,"is_primary":true,"text":[{"text":"        fn transaction_iter<'a, O>(&mut self, _addr: u8, _operations: O) -> Result<(), Self::Error>","highlight_start":88,"highlight_end":99}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":2007,"byte_end":2018,"line_start":68,"line_end":68,"column_start":88,"column_end":99,"is_primary":true,"text":[{"text":"        fn transaction_iter<'a, O>(&mut self, _addr: u8, _operations: O) -> Result<(), Self::Error>","highlight_start":88,"highlight_end":99}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":2007,"byte_end":2018,"line_start":68,"line_end":68,"column_start":88,"column_end":99,"is_primary":true,"text":[{"text":"        fn transaction_iter<'a, O>(&mut self, _addr: u8, _operations: O) -> Result<(), Self::Error>","highlight_start":88,"highlight_end":99}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs","byte_start":2007,"byte_end":2018,"line_start":68,"line_end":68,"column_start":88,"column_end":99,"is_primary":true,"text":[{"text":"        fn transaction_iter<'a, O>(&mut self, _addr: u8, _operations: O) -> Result<(), Self::Error>","highlight_start":88,"highlight_end":99}],"label":null,"suggested_replacement":"<i2c::I2c<I2C, PINS> as embedded_hal::i2c::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\i2c\\hal_1.rs:68:88\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        fn transaction_iter<'a, O>(&mut self, _addr: u8, _operations: O) -> Result<(), Self::Error>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn transaction_iter<'a, O>(&mut self, _addr: u8, _operations: O) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<i2c::I2c<I2C, PINS> as TryFrom>::Error\u001b[0m\u001b[0m>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                                        \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn transaction_iter<'a, O>(&mut self, _addr: u8, _operations: O) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<i2c::I2c<I2C, PINS> as TryInto>::Error\u001b[0m\u001b[0m>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                                        \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn transaction_iter<'a, O>(&mut self, _addr: u8, _operations: O) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<i2c::I2c<I2C, PINS> as WriteIterRead>::Error\u001b[0m\u001b[0m>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                                        \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn transaction_iter<'a, O>(&mut self, _addr: u8, _operations: O) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<i2c::I2c<I2C, PINS> as WriteRead>::Error\u001b[0m\u001b[0m>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                                        \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m     and 11 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":873,"byte_end":884,"line_start":33,"line_end":33,"column_start":46,"column_end":57,"is_primary":true,"text":[{"text":"        fn read(&mut self) -> nb::Result<u8, Self::Error> {","highlight_start":46,"highlight_end":57}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":873,"byte_end":884,"line_start":33,"line_end":33,"column_start":46,"column_end":57,"is_primary":true,"text":[{"text":"        fn read(&mut self) -> nb::Result<u8, Self::Error> {","highlight_start":46,"highlight_end":57}],"label":null,"suggested_replacement":"<serial::Rx<USART> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":873,"byte_end":884,"line_start":33,"line_end":33,"column_start":46,"column_end":57,"is_primary":true,"text":[{"text":"        fn read(&mut self) -> nb::Result<u8, Self::Error> {","highlight_start":46,"highlight_end":57}],"label":null,"suggested_replacement":"<serial::Rx<USART> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":873,"byte_end":884,"line_start":33,"line_end":33,"column_start":46,"column_end":57,"is_primary":true,"text":[{"text":"        fn read(&mut self) -> nb::Result<u8, Self::Error> {","highlight_start":46,"highlight_end":57}],"label":null,"suggested_replacement":"<serial::Rx<USART> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":873,"byte_end":884,"line_start":33,"line_end":33,"column_start":46,"column_end":57,"is_primary":true,"text":[{"text":"        fn read(&mut self) -> nb::Result<u8, Self::Error> {","highlight_start":46,"highlight_end":57}],"label":null,"suggested_replacement":"<serial::Rx<USART> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":873,"byte_end":884,"line_start":33,"line_end":33,"column_start":46,"column_end":57,"is_primary":true,"text":[{"text":"        fn read(&mut self) -> nb::Result<u8, Self::Error> {","highlight_start":46,"highlight_end":57}],"label":null,"suggested_replacement":"<serial::Rx<USART> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":873,"byte_end":884,"line_start":33,"line_end":33,"column_start":46,"column_end":57,"is_primary":true,"text":[{"text":"        fn read(&mut self) -> nb::Result<u8, Self::Error> {","highlight_start":46,"highlight_end":57}],"label":null,"suggested_replacement":"<serial::Rx<USART> as _embedded_hal_serial_Read>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":873,"byte_end":884,"line_start":33,"line_end":33,"column_start":46,"column_end":57,"is_primary":true,"text":[{"text":"        fn read(&mut self) -> nb::Result<u8, Self::Error> {","highlight_start":46,"highlight_end":57}],"label":null,"suggested_replacement":"<serial::Rx<USART> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":873,"byte_end":884,"line_start":33,"line_end":33,"column_start":46,"column_end":57,"is_primary":true,"text":[{"text":"        fn read(&mut self) -> nb::Result<u8, Self::Error> {","highlight_start":46,"highlight_end":57}],"label":null,"suggested_replacement":"<serial::Rx<USART> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":873,"byte_end":884,"line_start":33,"line_end":33,"column_start":46,"column_end":57,"is_primary":true,"text":[{"text":"        fn read(&mut self) -> nb::Result<u8, Self::Error> {","highlight_start":46,"highlight_end":57}],"label":null,"suggested_replacement":"<serial::Rx<USART> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":873,"byte_end":884,"line_start":33,"line_end":33,"column_start":46,"column_end":57,"is_primary":true,"text":[{"text":"        fn read(&mut self) -> nb::Result<u8, Self::Error> {","highlight_start":46,"highlight_end":57}],"label":null,"suggested_replacement":"<serial::Rx<USART> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs:33:46\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        fn read(&mut self) -> nb::Result<u8, Self::Error> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn read(&mut self) -> nb::Result<u8, \u001b[0m\u001b[0m\u001b[38;5;10m<serial::Rx<USART> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn read(&mut self) -> nb::Result<u8, \u001b[0m\u001b[0m\u001b[38;5;10m<serial::Rx<USART> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn read(&mut self) -> nb::Result<u8, \u001b[0m\u001b[0m\u001b[38;5;10m<serial::Rx<USART> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m33\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn read(&mut self) -> nb::Result<u8, \u001b[0m\u001b[0m\u001b[38;5;10m<serial::Rx<USART> as _embedded_hal_blocking_spi_Transfer>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m     and 6 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1354,"byte_end":1365,"line_start":44,"line_end":44,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn read(&mut self) -> nb::Result<u16, Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1354,"byte_end":1365,"line_start":44,"line_end":44,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn read(&mut self) -> nb::Result<u16, Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<serial::Rx<USART, u16> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1354,"byte_end":1365,"line_start":44,"line_end":44,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn read(&mut self) -> nb::Result<u16, Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<serial::Rx<USART, u16> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1354,"byte_end":1365,"line_start":44,"line_end":44,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn read(&mut self) -> nb::Result<u16, Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<serial::Rx<USART, u16> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1354,"byte_end":1365,"line_start":44,"line_end":44,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn read(&mut self) -> nb::Result<u16, Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<serial::Rx<USART, u16> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1354,"byte_end":1365,"line_start":44,"line_end":44,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn read(&mut self) -> nb::Result<u16, Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<serial::Rx<USART, u16> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1354,"byte_end":1365,"line_start":44,"line_end":44,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn read(&mut self) -> nb::Result<u16, Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<serial::Rx<USART, u16> as _embedded_hal_serial_Read>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1354,"byte_end":1365,"line_start":44,"line_end":44,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn read(&mut self) -> nb::Result<u16, Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<serial::Rx<USART, u16> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1354,"byte_end":1365,"line_start":44,"line_end":44,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn read(&mut self) -> nb::Result<u16, Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<serial::Rx<USART, u16> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1354,"byte_end":1365,"line_start":44,"line_end":44,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn read(&mut self) -> nb::Result<u16, Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<serial::Rx<USART, u16> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1354,"byte_end":1365,"line_start":44,"line_end":44,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn read(&mut self) -> nb::Result<u16, Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<serial::Rx<USART, u16> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs:44:47\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        fn read(&mut self) -> nb::Result<u16, Self::Error> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn read(&mut self) -> nb::Result<u16, \u001b[0m\u001b[0m\u001b[38;5;10m<serial::Rx<USART, u16> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn read(&mut self) -> nb::Result<u16, \u001b[0m\u001b[0m\u001b[38;5;10m<serial::Rx<USART, u16> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn read(&mut self) -> nb::Result<u16, \u001b[0m\u001b[0m\u001b[38;5;10m<serial::Rx<USART, u16> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m44\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn read(&mut self) -> nb::Result<u16, \u001b[0m\u001b[0m\u001b[38;5;10m<serial::Rx<USART, u16> as _embedded_hal_blocking_spi_Transfer>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m     and 6 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1644,"byte_end":1655,"line_start":54,"line_end":54,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> nb::Result<(), Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1644,"byte_end":1655,"line_start":54,"line_end":54,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> nb::Result<(), Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1644,"byte_end":1655,"line_start":54,"line_end":54,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> nb::Result<(), Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1644,"byte_end":1655,"line_start":54,"line_end":54,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> nb::Result<(), Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1644,"byte_end":1655,"line_start":54,"line_end":54,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> nb::Result<(), Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1644,"byte_end":1655,"line_start":54,"line_end":54,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> nb::Result<(), Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1644,"byte_end":1655,"line_start":54,"line_end":54,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> nb::Result<(), Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as _embedded_hal_serial_Read>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1644,"byte_end":1655,"line_start":54,"line_end":54,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> nb::Result<(), Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as _embedded_hal_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1644,"byte_end":1655,"line_start":54,"line_end":54,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> nb::Result<(), Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1644,"byte_end":1655,"line_start":54,"line_end":54,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> nb::Result<(), Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1644,"byte_end":1655,"line_start":54,"line_end":54,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> nb::Result<(), Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1644,"byte_end":1655,"line_start":54,"line_end":54,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> nb::Result<(), Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs:54:47\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        fn flush(&mut self) -> nb::Result<(), Self::Error> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn flush(&mut self) -> nb::Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<Serial<USART, PINS, WORD> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn flush(&mut self) -> nb::Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<Serial<USART, PINS, WORD> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn flush(&mut self) -> nb::Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<Serial<USART, PINS, WORD> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m54\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn flush(&mut self) -> nb::Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<Serial<USART, PINS, WORD> as _embedded_hal_blocking_spi_Transfer>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m     and 7 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1756,"byte_end":1767,"line_start":58,"line_end":58,"column_start":59,"column_end":70,"is_primary":true,"text":[{"text":"        fn write(&mut self, byte: WORD) -> nb::Result<(), Self::Error> {","highlight_start":59,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1756,"byte_end":1767,"line_start":58,"line_end":58,"column_start":59,"column_end":70,"is_primary":true,"text":[{"text":"        fn write(&mut self, byte: WORD) -> nb::Result<(), Self::Error> {","highlight_start":59,"highlight_end":70}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1756,"byte_end":1767,"line_start":58,"line_end":58,"column_start":59,"column_end":70,"is_primary":true,"text":[{"text":"        fn write(&mut self, byte: WORD) -> nb::Result<(), Self::Error> {","highlight_start":59,"highlight_end":70}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1756,"byte_end":1767,"line_start":58,"line_end":58,"column_start":59,"column_end":70,"is_primary":true,"text":[{"text":"        fn write(&mut self, byte: WORD) -> nb::Result<(), Self::Error> {","highlight_start":59,"highlight_end":70}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1756,"byte_end":1767,"line_start":58,"line_end":58,"column_start":59,"column_end":70,"is_primary":true,"text":[{"text":"        fn write(&mut self, byte: WORD) -> nb::Result<(), Self::Error> {","highlight_start":59,"highlight_end":70}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1756,"byte_end":1767,"line_start":58,"line_end":58,"column_start":59,"column_end":70,"is_primary":true,"text":[{"text":"        fn write(&mut self, byte: WORD) -> nb::Result<(), Self::Error> {","highlight_start":59,"highlight_end":70}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1756,"byte_end":1767,"line_start":58,"line_end":58,"column_start":59,"column_end":70,"is_primary":true,"text":[{"text":"        fn write(&mut self, byte: WORD) -> nb::Result<(), Self::Error> {","highlight_start":59,"highlight_end":70}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as _embedded_hal_serial_Read>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1756,"byte_end":1767,"line_start":58,"line_end":58,"column_start":59,"column_end":70,"is_primary":true,"text":[{"text":"        fn write(&mut self, byte: WORD) -> nb::Result<(), Self::Error> {","highlight_start":59,"highlight_end":70}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as _embedded_hal_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1756,"byte_end":1767,"line_start":58,"line_end":58,"column_start":59,"column_end":70,"is_primary":true,"text":[{"text":"        fn write(&mut self, byte: WORD) -> nb::Result<(), Self::Error> {","highlight_start":59,"highlight_end":70}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1756,"byte_end":1767,"line_start":58,"line_end":58,"column_start":59,"column_end":70,"is_primary":true,"text":[{"text":"        fn write(&mut self, byte: WORD) -> nb::Result<(), Self::Error> {","highlight_start":59,"highlight_end":70}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1756,"byte_end":1767,"line_start":58,"line_end":58,"column_start":59,"column_end":70,"is_primary":true,"text":[{"text":"        fn write(&mut self, byte: WORD) -> nb::Result<(), Self::Error> {","highlight_start":59,"highlight_end":70}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1756,"byte_end":1767,"line_start":58,"line_end":58,"column_start":59,"column_end":70,"is_primary":true,"text":[{"text":"        fn write(&mut self, byte: WORD) -> nb::Result<(), Self::Error> {","highlight_start":59,"highlight_end":70}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs:58:59\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        fn write(&mut self, byte: WORD) -> nb::Result<(), Self::Error> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write(&mut self, byte: WORD) -> nb::Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<Serial<USART, PINS, WORD> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write(&mut self, byte: WORD) -> nb::Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<Serial<USART, PINS, WORD> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write(&mut self, byte: WORD) -> nb::Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<Serial<USART, PINS, WORD> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m58\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write(&mut self, byte: WORD) -> nb::Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<Serial<USART, PINS, WORD> as _embedded_hal_blocking_spi_Transfer>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m     and 7 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1932,"byte_end":1943,"line_start":64,"line_end":64,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, word: u8) -> nb::Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1932,"byte_end":1943,"line_start":64,"line_end":64,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, word: u8) -> nb::Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<serial::Tx<USART> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1932,"byte_end":1943,"line_start":64,"line_end":64,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, word: u8) -> nb::Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<serial::Tx<USART> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1932,"byte_end":1943,"line_start":64,"line_end":64,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, word: u8) -> nb::Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<serial::Tx<USART> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1932,"byte_end":1943,"line_start":64,"line_end":64,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, word: u8) -> nb::Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<serial::Tx<USART> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1932,"byte_end":1943,"line_start":64,"line_end":64,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, word: u8) -> nb::Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<serial::Tx<USART> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1932,"byte_end":1943,"line_start":64,"line_end":64,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, word: u8) -> nb::Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<serial::Tx<USART> as _embedded_hal_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1932,"byte_end":1943,"line_start":64,"line_end":64,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, word: u8) -> nb::Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<serial::Tx<USART> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1932,"byte_end":1943,"line_start":64,"line_end":64,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, word: u8) -> nb::Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<serial::Tx<USART> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1932,"byte_end":1943,"line_start":64,"line_end":64,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, word: u8) -> nb::Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<serial::Tx<USART> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":1932,"byte_end":1943,"line_start":64,"line_end":64,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, word: u8) -> nb::Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<serial::Tx<USART> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs:64:57\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        fn write(&mut self, word: u8) -> nb::Result<(), Self::Error> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write(&mut self, word: u8) -> nb::Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<serial::Tx<USART> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write(&mut self, word: u8) -> nb::Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<serial::Tx<USART> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write(&mut self, word: u8) -> nb::Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<serial::Tx<USART> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write(&mut self, word: u8) -> nb::Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<serial::Tx<USART> as _embedded_hal_blocking_spi_Transfer>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m     and 6 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":2033,"byte_end":2044,"line_start":68,"line_end":68,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> nb::Result<(), Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":2033,"byte_end":2044,"line_start":68,"line_end":68,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> nb::Result<(), Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<serial::Tx<USART> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":2033,"byte_end":2044,"line_start":68,"line_end":68,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> nb::Result<(), Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<serial::Tx<USART> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":2033,"byte_end":2044,"line_start":68,"line_end":68,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> nb::Result<(), Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<serial::Tx<USART> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":2033,"byte_end":2044,"line_start":68,"line_end":68,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> nb::Result<(), Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<serial::Tx<USART> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":2033,"byte_end":2044,"line_start":68,"line_end":68,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> nb::Result<(), Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<serial::Tx<USART> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":2033,"byte_end":2044,"line_start":68,"line_end":68,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> nb::Result<(), Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<serial::Tx<USART> as _embedded_hal_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":2033,"byte_end":2044,"line_start":68,"line_end":68,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> nb::Result<(), Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<serial::Tx<USART> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":2033,"byte_end":2044,"line_start":68,"line_end":68,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> nb::Result<(), Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<serial::Tx<USART> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":2033,"byte_end":2044,"line_start":68,"line_end":68,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> nb::Result<(), Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<serial::Tx<USART> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":2033,"byte_end":2044,"line_start":68,"line_end":68,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> nb::Result<(), Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<serial::Tx<USART> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs:68:47\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        fn flush(&mut self) -> nb::Result<(), Self::Error> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn flush(&mut self) -> nb::Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<serial::Tx<USART> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn flush(&mut self) -> nb::Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<serial::Tx<USART> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn flush(&mut self) -> nb::Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<serial::Tx<USART> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m68\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn flush(&mut self) -> nb::Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<serial::Tx<USART> as _embedded_hal_blocking_spi_Transfer>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m     and 6 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":2530,"byte_end":2541,"line_start":79,"line_end":79,"column_start":58,"column_end":69,"is_primary":true,"text":[{"text":"        fn write(&mut self, word: u16) -> nb::Result<(), Self::Error> {","highlight_start":58,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":2530,"byte_end":2541,"line_start":79,"line_end":79,"column_start":58,"column_end":69,"is_primary":true,"text":[{"text":"        fn write(&mut self, word: u16) -> nb::Result<(), Self::Error> {","highlight_start":58,"highlight_end":69}],"label":null,"suggested_replacement":"<serial::Tx<USART, u16> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":2530,"byte_end":2541,"line_start":79,"line_end":79,"column_start":58,"column_end":69,"is_primary":true,"text":[{"text":"        fn write(&mut self, word: u16) -> nb::Result<(), Self::Error> {","highlight_start":58,"highlight_end":69}],"label":null,"suggested_replacement":"<serial::Tx<USART, u16> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":2530,"byte_end":2541,"line_start":79,"line_end":79,"column_start":58,"column_end":69,"is_primary":true,"text":[{"text":"        fn write(&mut self, word: u16) -> nb::Result<(), Self::Error> {","highlight_start":58,"highlight_end":69}],"label":null,"suggested_replacement":"<serial::Tx<USART, u16> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":2530,"byte_end":2541,"line_start":79,"line_end":79,"column_start":58,"column_end":69,"is_primary":true,"text":[{"text":"        fn write(&mut self, word: u16) -> nb::Result<(), Self::Error> {","highlight_start":58,"highlight_end":69}],"label":null,"suggested_replacement":"<serial::Tx<USART, u16> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":2530,"byte_end":2541,"line_start":79,"line_end":79,"column_start":58,"column_end":69,"is_primary":true,"text":[{"text":"        fn write(&mut self, word: u16) -> nb::Result<(), Self::Error> {","highlight_start":58,"highlight_end":69}],"label":null,"suggested_replacement":"<serial::Tx<USART, u16> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":2530,"byte_end":2541,"line_start":79,"line_end":79,"column_start":58,"column_end":69,"is_primary":true,"text":[{"text":"        fn write(&mut self, word: u16) -> nb::Result<(), Self::Error> {","highlight_start":58,"highlight_end":69}],"label":null,"suggested_replacement":"<serial::Tx<USART, u16> as _embedded_hal_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":2530,"byte_end":2541,"line_start":79,"line_end":79,"column_start":58,"column_end":69,"is_primary":true,"text":[{"text":"        fn write(&mut self, word: u16) -> nb::Result<(), Self::Error> {","highlight_start":58,"highlight_end":69}],"label":null,"suggested_replacement":"<serial::Tx<USART, u16> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":2530,"byte_end":2541,"line_start":79,"line_end":79,"column_start":58,"column_end":69,"is_primary":true,"text":[{"text":"        fn write(&mut self, word: u16) -> nb::Result<(), Self::Error> {","highlight_start":58,"highlight_end":69}],"label":null,"suggested_replacement":"<serial::Tx<USART, u16> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":2530,"byte_end":2541,"line_start":79,"line_end":79,"column_start":58,"column_end":69,"is_primary":true,"text":[{"text":"        fn write(&mut self, word: u16) -> nb::Result<(), Self::Error> {","highlight_start":58,"highlight_end":69}],"label":null,"suggested_replacement":"<serial::Tx<USART, u16> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":2530,"byte_end":2541,"line_start":79,"line_end":79,"column_start":58,"column_end":69,"is_primary":true,"text":[{"text":"        fn write(&mut self, word: u16) -> nb::Result<(), Self::Error> {","highlight_start":58,"highlight_end":69}],"label":null,"suggested_replacement":"<serial::Tx<USART, u16> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs:79:58\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        fn write(&mut self, word: u16) -> nb::Result<(), Self::Error> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write(&mut self, word: u16) -> nb::Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<serial::Tx<USART, u16> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write(&mut self, word: u16) -> nb::Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<serial::Tx<USART, u16> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write(&mut self, word: u16) -> nb::Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<serial::Tx<USART, u16> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m79\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write(&mut self, word: u16) -> nb::Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<serial::Tx<USART, u16> as _embedded_hal_blocking_spi_Transfer>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m     and 6 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":2631,"byte_end":2642,"line_start":83,"line_end":83,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> nb::Result<(), Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":2631,"byte_end":2642,"line_start":83,"line_end":83,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> nb::Result<(), Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<serial::Tx<USART, u16> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":2631,"byte_end":2642,"line_start":83,"line_end":83,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> nb::Result<(), Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<serial::Tx<USART, u16> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":2631,"byte_end":2642,"line_start":83,"line_end":83,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> nb::Result<(), Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<serial::Tx<USART, u16> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":2631,"byte_end":2642,"line_start":83,"line_end":83,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> nb::Result<(), Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<serial::Tx<USART, u16> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":2631,"byte_end":2642,"line_start":83,"line_end":83,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> nb::Result<(), Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<serial::Tx<USART, u16> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":2631,"byte_end":2642,"line_start":83,"line_end":83,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> nb::Result<(), Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<serial::Tx<USART, u16> as _embedded_hal_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":2631,"byte_end":2642,"line_start":83,"line_end":83,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> nb::Result<(), Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<serial::Tx<USART, u16> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":2631,"byte_end":2642,"line_start":83,"line_end":83,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> nb::Result<(), Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<serial::Tx<USART, u16> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":2631,"byte_end":2642,"line_start":83,"line_end":83,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> nb::Result<(), Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<serial::Tx<USART, u16> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":2631,"byte_end":2642,"line_start":83,"line_end":83,"column_start":47,"column_end":58,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> nb::Result<(), Self::Error> {","highlight_start":47,"highlight_end":58}],"label":null,"suggested_replacement":"<serial::Tx<USART, u16> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs:83:47\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m83\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        fn flush(&mut self) -> nb::Result<(), Self::Error> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m83\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn flush(&mut self) -> nb::Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<serial::Tx<USART, u16> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m83\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn flush(&mut self) -> nb::Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<serial::Tx<USART, u16> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m83\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn flush(&mut self) -> nb::Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<serial::Tx<USART, u16> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m83\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn flush(&mut self) -> nb::Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<serial::Tx<USART, u16> as _embedded_hal_blocking_spi_Transfer>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                               \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m     and 6 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3075,"byte_end":3086,"line_start":99,"line_end":99,"column_start":59,"column_end":70,"is_primary":true,"text":[{"text":"        fn write(&mut self, slice: &[WORD]) -> Result<(), Self::Error> {","highlight_start":59,"highlight_end":70}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3075,"byte_end":3086,"line_start":99,"line_end":99,"column_start":59,"column_end":70,"is_primary":true,"text":[{"text":"        fn write(&mut self, slice: &[WORD]) -> Result<(), Self::Error> {","highlight_start":59,"highlight_end":70}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3075,"byte_end":3086,"line_start":99,"line_end":99,"column_start":59,"column_end":70,"is_primary":true,"text":[{"text":"        fn write(&mut self, slice: &[WORD]) -> Result<(), Self::Error> {","highlight_start":59,"highlight_end":70}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3075,"byte_end":3086,"line_start":99,"line_end":99,"column_start":59,"column_end":70,"is_primary":true,"text":[{"text":"        fn write(&mut self, slice: &[WORD]) -> Result<(), Self::Error> {","highlight_start":59,"highlight_end":70}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3075,"byte_end":3086,"line_start":99,"line_end":99,"column_start":59,"column_end":70,"is_primary":true,"text":[{"text":"        fn write(&mut self, slice: &[WORD]) -> Result<(), Self::Error> {","highlight_start":59,"highlight_end":70}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3075,"byte_end":3086,"line_start":99,"line_end":99,"column_start":59,"column_end":70,"is_primary":true,"text":[{"text":"        fn write(&mut self, slice: &[WORD]) -> Result<(), Self::Error> {","highlight_start":59,"highlight_end":70}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3075,"byte_end":3086,"line_start":99,"line_end":99,"column_start":59,"column_end":70,"is_primary":true,"text":[{"text":"        fn write(&mut self, slice: &[WORD]) -> Result<(), Self::Error> {","highlight_start":59,"highlight_end":70}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as _embedded_hal_serial_Read>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3075,"byte_end":3086,"line_start":99,"line_end":99,"column_start":59,"column_end":70,"is_primary":true,"text":[{"text":"        fn write(&mut self, slice: &[WORD]) -> Result<(), Self::Error> {","highlight_start":59,"highlight_end":70}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as _embedded_hal_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3075,"byte_end":3086,"line_start":99,"line_end":99,"column_start":59,"column_end":70,"is_primary":true,"text":[{"text":"        fn write(&mut self, slice: &[WORD]) -> Result<(), Self::Error> {","highlight_start":59,"highlight_end":70}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3075,"byte_end":3086,"line_start":99,"line_end":99,"column_start":59,"column_end":70,"is_primary":true,"text":[{"text":"        fn write(&mut self, slice: &[WORD]) -> Result<(), Self::Error> {","highlight_start":59,"highlight_end":70}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3075,"byte_end":3086,"line_start":99,"line_end":99,"column_start":59,"column_end":70,"is_primary":true,"text":[{"text":"        fn write(&mut self, slice: &[WORD]) -> Result<(), Self::Error> {","highlight_start":59,"highlight_end":70}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3075,"byte_end":3086,"line_start":99,"line_end":99,"column_start":59,"column_end":70,"is_primary":true,"text":[{"text":"        fn write(&mut self, slice: &[WORD]) -> Result<(), Self::Error> {","highlight_start":59,"highlight_end":70}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs:99:59\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        fn write(&mut self, slice: &[WORD]) -> Result<(), Self::Error> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write(&mut self, slice: &[WORD]) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<Serial<USART, PINS, WORD> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write(&mut self, slice: &[WORD]) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<Serial<USART, PINS, WORD> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write(&mut self, slice: &[WORD]) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<Serial<USART, PINS, WORD> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m99\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write(&mut self, slice: &[WORD]) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<Serial<USART, PINS, WORD> as _embedded_hal_blocking_spi_Transfer>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                           \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m     and 7 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3176,"byte_end":3187,"line_start":103,"line_end":103,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> Result<(), Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3176,"byte_end":3187,"line_start":103,"line_end":103,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> Result<(), Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3176,"byte_end":3187,"line_start":103,"line_end":103,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> Result<(), Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3176,"byte_end":3187,"line_start":103,"line_end":103,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> Result<(), Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3176,"byte_end":3187,"line_start":103,"line_end":103,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> Result<(), Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3176,"byte_end":3187,"line_start":103,"line_end":103,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> Result<(), Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3176,"byte_end":3187,"line_start":103,"line_end":103,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> Result<(), Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as _embedded_hal_serial_Read>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3176,"byte_end":3187,"line_start":103,"line_end":103,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> Result<(), Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as _embedded_hal_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3176,"byte_end":3187,"line_start":103,"line_end":103,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> Result<(), Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3176,"byte_end":3187,"line_start":103,"line_end":103,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> Result<(), Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3176,"byte_end":3187,"line_start":103,"line_end":103,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> Result<(), Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3176,"byte_end":3187,"line_start":103,"line_end":103,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> Result<(), Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<Serial<USART, PINS, WORD> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs:103:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m103\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        fn flush(&mut self) -> Result<(), Self::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m103\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn flush(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<Serial<USART, PINS, WORD> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m103\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn flush(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<Serial<USART, PINS, WORD> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m103\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn flush(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<Serial<USART, PINS, WORD> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m103\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn flush(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<Serial<USART, PINS, WORD> as _embedded_hal_blocking_spi_Transfer>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m      and 7 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3348,"byte_end":3359,"line_start":109,"line_end":109,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, bytes: &[u8]) -> Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3348,"byte_end":3359,"line_start":109,"line_end":109,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, bytes: &[u8]) -> Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<serial::Tx<USART> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3348,"byte_end":3359,"line_start":109,"line_end":109,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, bytes: &[u8]) -> Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<serial::Tx<USART> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3348,"byte_end":3359,"line_start":109,"line_end":109,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, bytes: &[u8]) -> Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<serial::Tx<USART> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3348,"byte_end":3359,"line_start":109,"line_end":109,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, bytes: &[u8]) -> Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<serial::Tx<USART> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3348,"byte_end":3359,"line_start":109,"line_end":109,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, bytes: &[u8]) -> Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<serial::Tx<USART> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3348,"byte_end":3359,"line_start":109,"line_end":109,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, bytes: &[u8]) -> Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<serial::Tx<USART> as _embedded_hal_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3348,"byte_end":3359,"line_start":109,"line_end":109,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, bytes: &[u8]) -> Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<serial::Tx<USART> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3348,"byte_end":3359,"line_start":109,"line_end":109,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, bytes: &[u8]) -> Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<serial::Tx<USART> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3348,"byte_end":3359,"line_start":109,"line_end":109,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, bytes: &[u8]) -> Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<serial::Tx<USART> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3348,"byte_end":3359,"line_start":109,"line_end":109,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, bytes: &[u8]) -> Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<serial::Tx<USART> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs:109:57\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        fn write(&mut self, bytes: &[u8]) -> Result<(), Self::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write(&mut self, bytes: &[u8]) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<serial::Tx<USART> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write(&mut self, bytes: &[u8]) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<serial::Tx<USART> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write(&mut self, bytes: &[u8]) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<serial::Tx<USART> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m109\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write(&mut self, bytes: &[u8]) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<serial::Tx<USART> as _embedded_hal_blocking_spi_Transfer>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m      and 6 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3451,"byte_end":3462,"line_start":113,"line_end":113,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> Result<(), Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3451,"byte_end":3462,"line_start":113,"line_end":113,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> Result<(), Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<serial::Tx<USART> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3451,"byte_end":3462,"line_start":113,"line_end":113,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> Result<(), Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<serial::Tx<USART> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3451,"byte_end":3462,"line_start":113,"line_end":113,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> Result<(), Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<serial::Tx<USART> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3451,"byte_end":3462,"line_start":113,"line_end":113,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> Result<(), Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<serial::Tx<USART> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3451,"byte_end":3462,"line_start":113,"line_end":113,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> Result<(), Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<serial::Tx<USART> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3451,"byte_end":3462,"line_start":113,"line_end":113,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> Result<(), Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<serial::Tx<USART> as _embedded_hal_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3451,"byte_end":3462,"line_start":113,"line_end":113,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> Result<(), Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<serial::Tx<USART> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3451,"byte_end":3462,"line_start":113,"line_end":113,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> Result<(), Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<serial::Tx<USART> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3451,"byte_end":3462,"line_start":113,"line_end":113,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> Result<(), Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<serial::Tx<USART> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3451,"byte_end":3462,"line_start":113,"line_end":113,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> Result<(), Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<serial::Tx<USART> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs:113:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m113\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        fn flush(&mut self) -> Result<(), Self::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m113\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn flush(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<serial::Tx<USART> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m113\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn flush(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<serial::Tx<USART> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m113\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn flush(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<serial::Tx<USART> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m113\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn flush(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<serial::Tx<USART> as _embedded_hal_blocking_spi_Transfer>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m      and 6 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3624,"byte_end":3635,"line_start":119,"line_end":119,"column_start":58,"column_end":69,"is_primary":true,"text":[{"text":"        fn write(&mut self, slice: &[u16]) -> Result<(), Self::Error> {","highlight_start":58,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3624,"byte_end":3635,"line_start":119,"line_end":119,"column_start":58,"column_end":69,"is_primary":true,"text":[{"text":"        fn write(&mut self, slice: &[u16]) -> Result<(), Self::Error> {","highlight_start":58,"highlight_end":69}],"label":null,"suggested_replacement":"<serial::Tx<USART, u16> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3624,"byte_end":3635,"line_start":119,"line_end":119,"column_start":58,"column_end":69,"is_primary":true,"text":[{"text":"        fn write(&mut self, slice: &[u16]) -> Result<(), Self::Error> {","highlight_start":58,"highlight_end":69}],"label":null,"suggested_replacement":"<serial::Tx<USART, u16> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3624,"byte_end":3635,"line_start":119,"line_end":119,"column_start":58,"column_end":69,"is_primary":true,"text":[{"text":"        fn write(&mut self, slice: &[u16]) -> Result<(), Self::Error> {","highlight_start":58,"highlight_end":69}],"label":null,"suggested_replacement":"<serial::Tx<USART, u16> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3624,"byte_end":3635,"line_start":119,"line_end":119,"column_start":58,"column_end":69,"is_primary":true,"text":[{"text":"        fn write(&mut self, slice: &[u16]) -> Result<(), Self::Error> {","highlight_start":58,"highlight_end":69}],"label":null,"suggested_replacement":"<serial::Tx<USART, u16> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3624,"byte_end":3635,"line_start":119,"line_end":119,"column_start":58,"column_end":69,"is_primary":true,"text":[{"text":"        fn write(&mut self, slice: &[u16]) -> Result<(), Self::Error> {","highlight_start":58,"highlight_end":69}],"label":null,"suggested_replacement":"<serial::Tx<USART, u16> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3624,"byte_end":3635,"line_start":119,"line_end":119,"column_start":58,"column_end":69,"is_primary":true,"text":[{"text":"        fn write(&mut self, slice: &[u16]) -> Result<(), Self::Error> {","highlight_start":58,"highlight_end":69}],"label":null,"suggested_replacement":"<serial::Tx<USART, u16> as _embedded_hal_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3624,"byte_end":3635,"line_start":119,"line_end":119,"column_start":58,"column_end":69,"is_primary":true,"text":[{"text":"        fn write(&mut self, slice: &[u16]) -> Result<(), Self::Error> {","highlight_start":58,"highlight_end":69}],"label":null,"suggested_replacement":"<serial::Tx<USART, u16> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3624,"byte_end":3635,"line_start":119,"line_end":119,"column_start":58,"column_end":69,"is_primary":true,"text":[{"text":"        fn write(&mut self, slice: &[u16]) -> Result<(), Self::Error> {","highlight_start":58,"highlight_end":69}],"label":null,"suggested_replacement":"<serial::Tx<USART, u16> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3624,"byte_end":3635,"line_start":119,"line_end":119,"column_start":58,"column_end":69,"is_primary":true,"text":[{"text":"        fn write(&mut self, slice: &[u16]) -> Result<(), Self::Error> {","highlight_start":58,"highlight_end":69}],"label":null,"suggested_replacement":"<serial::Tx<USART, u16> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3624,"byte_end":3635,"line_start":119,"line_end":119,"column_start":58,"column_end":69,"is_primary":true,"text":[{"text":"        fn write(&mut self, slice: &[u16]) -> Result<(), Self::Error> {","highlight_start":58,"highlight_end":69}],"label":null,"suggested_replacement":"<serial::Tx<USART, u16> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs:119:58\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m119\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        fn write(&mut self, slice: &[u16]) -> Result<(), Self::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m119\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write(&mut self, slice: &[u16]) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<serial::Tx<USART, u16> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m119\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write(&mut self, slice: &[u16]) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<serial::Tx<USART, u16> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m119\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write(&mut self, slice: &[u16]) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<serial::Tx<USART, u16> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m119\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write(&mut self, slice: &[u16]) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<serial::Tx<USART, u16> as _embedded_hal_blocking_spi_Transfer>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                          \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m      and 6 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3727,"byte_end":3738,"line_start":123,"line_end":123,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> Result<(), Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3727,"byte_end":3738,"line_start":123,"line_end":123,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> Result<(), Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<serial::Tx<USART, u16> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3727,"byte_end":3738,"line_start":123,"line_end":123,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> Result<(), Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<serial::Tx<USART, u16> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3727,"byte_end":3738,"line_start":123,"line_end":123,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> Result<(), Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<serial::Tx<USART, u16> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3727,"byte_end":3738,"line_start":123,"line_end":123,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> Result<(), Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<serial::Tx<USART, u16> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3727,"byte_end":3738,"line_start":123,"line_end":123,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> Result<(), Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<serial::Tx<USART, u16> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3727,"byte_end":3738,"line_start":123,"line_end":123,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> Result<(), Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<serial::Tx<USART, u16> as _embedded_hal_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3727,"byte_end":3738,"line_start":123,"line_end":123,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> Result<(), Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<serial::Tx<USART, u16> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3727,"byte_end":3738,"line_start":123,"line_end":123,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> Result<(), Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<serial::Tx<USART, u16> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3727,"byte_end":3738,"line_start":123,"line_end":123,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> Result<(), Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<serial::Tx<USART, u16> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs","byte_start":3727,"byte_end":3738,"line_start":123,"line_end":123,"column_start":43,"column_end":54,"is_primary":true,"text":[{"text":"        fn flush(&mut self) -> Result<(), Self::Error> {","highlight_start":43,"highlight_end":54}],"label":null,"suggested_replacement":"<serial::Tx<USART, u16> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\serial\\hal_1.rs:123:43\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m123\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        fn flush(&mut self) -> Result<(), Self::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m123\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn flush(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<serial::Tx<USART, u16> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m123\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn flush(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<serial::Tx<USART, u16> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m123\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn flush(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<serial::Tx<USART, u16> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m123\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn flush(&mut self) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<serial::Tx<USART, u16> as _embedded_hal_blocking_spi_Transfer>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m      and 6 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":2509,"byte_end":2520,"line_start":89,"line_end":89,"column_start":72,"column_end":83,"is_primary":true,"text":[{"text":"        fn transfer_inplace(&mut self, words: &mut [u8]) -> Result<(), Self::Error> {","highlight_start":72,"highlight_end":83}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":2509,"byte_end":2520,"line_start":89,"line_end":89,"column_start":72,"column_end":83,"is_primary":true,"text":[{"text":"        fn transfer_inplace(&mut self, words: &mut [u8]) -> Result<(), Self::Error> {","highlight_start":72,"highlight_end":83}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TRANSFER_MODE> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":2509,"byte_end":2520,"line_start":89,"line_end":89,"column_start":72,"column_end":83,"is_primary":true,"text":[{"text":"        fn transfer_inplace(&mut self, words: &mut [u8]) -> Result<(), Self::Error> {","highlight_start":72,"highlight_end":83}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TRANSFER_MODE> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":2509,"byte_end":2520,"line_start":89,"line_end":89,"column_start":72,"column_end":83,"is_primary":true,"text":[{"text":"        fn transfer_inplace(&mut self, words: &mut [u8]) -> Result<(), Self::Error> {","highlight_start":72,"highlight_end":83}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TRANSFER_MODE> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":2509,"byte_end":2520,"line_start":89,"line_end":89,"column_start":72,"column_end":83,"is_primary":true,"text":[{"text":"        fn transfer_inplace(&mut self, words: &mut [u8]) -> Result<(), Self::Error> {","highlight_start":72,"highlight_end":83}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TRANSFER_MODE> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":2509,"byte_end":2520,"line_start":89,"line_end":89,"column_start":72,"column_end":83,"is_primary":true,"text":[{"text":"        fn transfer_inplace(&mut self, words: &mut [u8]) -> Result<(), Self::Error> {","highlight_start":72,"highlight_end":83}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TRANSFER_MODE> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":2509,"byte_end":2520,"line_start":89,"line_end":89,"column_start":72,"column_end":83,"is_primary":true,"text":[{"text":"        fn transfer_inplace(&mut self, words: &mut [u8]) -> Result<(), Self::Error> {","highlight_start":72,"highlight_end":83}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TRANSFER_MODE> as embedded_hal::blocking::spi::Transactional>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":2509,"byte_end":2520,"line_start":89,"line_end":89,"column_start":72,"column_end":83,"is_primary":true,"text":[{"text":"        fn transfer_inplace(&mut self, words: &mut [u8]) -> Result<(), Self::Error> {","highlight_start":72,"highlight_end":83}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TRANSFER_MODE> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":2509,"byte_end":2520,"line_start":89,"line_end":89,"column_start":72,"column_end":83,"is_primary":true,"text":[{"text":"        fn transfer_inplace(&mut self, words: &mut [u8]) -> Result<(), Self::Error> {","highlight_start":72,"highlight_end":83}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TRANSFER_MODE> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":2509,"byte_end":2520,"line_start":89,"line_end":89,"column_start":72,"column_end":83,"is_primary":true,"text":[{"text":"        fn transfer_inplace(&mut self, words: &mut [u8]) -> Result<(), Self::Error> {","highlight_start":72,"highlight_end":83}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TRANSFER_MODE> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":2509,"byte_end":2520,"line_start":89,"line_end":89,"column_start":72,"column_end":83,"is_primary":true,"text":[{"text":"        fn transfer_inplace(&mut self, words: &mut [u8]) -> Result<(), Self::Error> {","highlight_start":72,"highlight_end":83}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TRANSFER_MODE> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":2509,"byte_end":2520,"line_start":89,"line_end":89,"column_start":72,"column_end":83,"is_primary":true,"text":[{"text":"        fn transfer_inplace(&mut self, words: &mut [u8]) -> Result<(), Self::Error> {","highlight_start":72,"highlight_end":83}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TRANSFER_MODE> as embedded_hal::spi::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs:89:72\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m89\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        fn transfer_inplace(&mut self, words: &mut [u8]) -> Result<(), Self::Error> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m89\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn transfer_inplace(&mut self, words: &mut [u8]) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<Spi<SPI, PINS, TRANSFER_MODE> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                        \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m89\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn transfer_inplace(&mut self, words: &mut [u8]) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<Spi<SPI, PINS, TRANSFER_MODE> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                        \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m89\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn transfer_inplace(&mut self, words: &mut [u8]) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<Spi<SPI, PINS, TRANSFER_MODE> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                        \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m89\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn transfer_inplace(&mut self, words: &mut [u8]) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<Spi<SPI, PINS, TRANSFER_MODE> as _embedded_hal_blocking_spi_Transfer>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                                        \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m     and 7 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":2925,"byte_end":2936,"line_start":104,"line_end":104,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, words: &[u8]) -> Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":2925,"byte_end":2936,"line_start":104,"line_end":104,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, words: &[u8]) -> Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeNormal> as FullDuplex>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":2925,"byte_end":2936,"line_start":104,"line_end":104,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, words: &[u8]) -> Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeNormal> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":2925,"byte_end":2936,"line_start":104,"line_end":104,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, words: &[u8]) -> Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeNormal> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":2925,"byte_end":2936,"line_start":104,"line_end":104,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, words: &[u8]) -> Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeNormal> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":2925,"byte_end":2936,"line_start":104,"line_end":104,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, words: &[u8]) -> Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeNormal> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":2925,"byte_end":2936,"line_start":104,"line_end":104,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, words: &[u8]) -> Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeNormal> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":2925,"byte_end":2936,"line_start":104,"line_end":104,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, words: &[u8]) -> Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeNormal> as embedded_hal::blocking::spi::Transactional>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":2925,"byte_end":2936,"line_start":104,"line_end":104,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, words: &[u8]) -> Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeNormal> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":2925,"byte_end":2936,"line_start":104,"line_end":104,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, words: &[u8]) -> Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeNormal> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":2925,"byte_end":2936,"line_start":104,"line_end":104,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, words: &[u8]) -> Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeNormal> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":2925,"byte_end":2936,"line_start":104,"line_end":104,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, words: &[u8]) -> Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeNormal> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":2925,"byte_end":2936,"line_start":104,"line_end":104,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, words: &[u8]) -> Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeNormal> as embedded_hal::spi::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs:104:57\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        fn write(&mut self, words: &[u8]) -> Result<(), Self::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write(&mut self, words: &[u8]) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<Spi<SPI, PINS, TransferModeNormal> as FullDuplex>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write(&mut self, words: &[u8]) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<Spi<SPI, PINS, TransferModeNormal> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write(&mut self, words: &[u8]) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<Spi<SPI, PINS, TransferModeNormal> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m104\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write(&mut self, words: &[u8]) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<Spi<SPI, PINS, TransferModeNormal> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m      and 8 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":3347,"byte_end":3358,"line_start":119,"line_end":119,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, words: &[u8]) -> Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":3347,"byte_end":3358,"line_start":119,"line_end":119,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, words: &[u8]) -> Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeBidi> as FullDuplex>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":3347,"byte_end":3358,"line_start":119,"line_end":119,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, words: &[u8]) -> Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeBidi> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":3347,"byte_end":3358,"line_start":119,"line_end":119,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, words: &[u8]) -> Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeBidi> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":3347,"byte_end":3358,"line_start":119,"line_end":119,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, words: &[u8]) -> Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeBidi> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":3347,"byte_end":3358,"line_start":119,"line_end":119,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, words: &[u8]) -> Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeBidi> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":3347,"byte_end":3358,"line_start":119,"line_end":119,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, words: &[u8]) -> Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeBidi> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":3347,"byte_end":3358,"line_start":119,"line_end":119,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, words: &[u8]) -> Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeBidi> as embedded_hal::blocking::spi::Transactional>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":3347,"byte_end":3358,"line_start":119,"line_end":119,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, words: &[u8]) -> Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeBidi> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":3347,"byte_end":3358,"line_start":119,"line_end":119,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, words: &[u8]) -> Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeBidi> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":3347,"byte_end":3358,"line_start":119,"line_end":119,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, words: &[u8]) -> Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeBidi> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":3347,"byte_end":3358,"line_start":119,"line_end":119,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, words: &[u8]) -> Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeBidi> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":3347,"byte_end":3358,"line_start":119,"line_end":119,"column_start":57,"column_end":68,"is_primary":true,"text":[{"text":"        fn write(&mut self, words: &[u8]) -> Result<(), Self::Error> {","highlight_start":57,"highlight_end":68}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeBidi> as embedded_hal::spi::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs:119:57\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m119\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        fn write(&mut self, words: &[u8]) -> Result<(), Self::Error> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m119\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write(&mut self, words: &[u8]) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<Spi<SPI, PINS, TransferModeBidi> as FullDuplex>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m119\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write(&mut self, words: &[u8]) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<Spi<SPI, PINS, TransferModeBidi> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m119\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write(&mut self, words: &[u8]) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<Spi<SPI, PINS, TransferModeBidi> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m119\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write(&mut self, words: &[u8]) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<Spi<SPI, PINS, TransferModeBidi> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                         \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m      and 8 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":3739,"byte_end":3750,"line_start":133,"line_end":133,"column_start":63,"column_end":74,"is_primary":true,"text":[{"text":"        fn write_iter<WI>(&mut self, words: WI) -> Result<(), Self::Error>","highlight_start":63,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":3739,"byte_end":3750,"line_start":133,"line_end":133,"column_start":63,"column_end":74,"is_primary":true,"text":[{"text":"        fn write_iter<WI>(&mut self, words: WI) -> Result<(), Self::Error>","highlight_start":63,"highlight_end":74}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeNormal> as FullDuplex>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":3739,"byte_end":3750,"line_start":133,"line_end":133,"column_start":63,"column_end":74,"is_primary":true,"text":[{"text":"        fn write_iter<WI>(&mut self, words: WI) -> Result<(), Self::Error>","highlight_start":63,"highlight_end":74}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeNormal> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":3739,"byte_end":3750,"line_start":133,"line_end":133,"column_start":63,"column_end":74,"is_primary":true,"text":[{"text":"        fn write_iter<WI>(&mut self, words: WI) -> Result<(), Self::Error>","highlight_start":63,"highlight_end":74}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeNormal> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":3739,"byte_end":3750,"line_start":133,"line_end":133,"column_start":63,"column_end":74,"is_primary":true,"text":[{"text":"        fn write_iter<WI>(&mut self, words: WI) -> Result<(), Self::Error>","highlight_start":63,"highlight_end":74}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeNormal> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":3739,"byte_end":3750,"line_start":133,"line_end":133,"column_start":63,"column_end":74,"is_primary":true,"text":[{"text":"        fn write_iter<WI>(&mut self, words: WI) -> Result<(), Self::Error>","highlight_start":63,"highlight_end":74}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeNormal> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":3739,"byte_end":3750,"line_start":133,"line_end":133,"column_start":63,"column_end":74,"is_primary":true,"text":[{"text":"        fn write_iter<WI>(&mut self, words: WI) -> Result<(), Self::Error>","highlight_start":63,"highlight_end":74}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeNormal> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":3739,"byte_end":3750,"line_start":133,"line_end":133,"column_start":63,"column_end":74,"is_primary":true,"text":[{"text":"        fn write_iter<WI>(&mut self, words: WI) -> Result<(), Self::Error>","highlight_start":63,"highlight_end":74}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeNormal> as embedded_hal::blocking::spi::Transactional>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":3739,"byte_end":3750,"line_start":133,"line_end":133,"column_start":63,"column_end":74,"is_primary":true,"text":[{"text":"        fn write_iter<WI>(&mut self, words: WI) -> Result<(), Self::Error>","highlight_start":63,"highlight_end":74}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeNormal> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":3739,"byte_end":3750,"line_start":133,"line_end":133,"column_start":63,"column_end":74,"is_primary":true,"text":[{"text":"        fn write_iter<WI>(&mut self, words: WI) -> Result<(), Self::Error>","highlight_start":63,"highlight_end":74}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeNormal> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":3739,"byte_end":3750,"line_start":133,"line_end":133,"column_start":63,"column_end":74,"is_primary":true,"text":[{"text":"        fn write_iter<WI>(&mut self, words: WI) -> Result<(), Self::Error>","highlight_start":63,"highlight_end":74}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeNormal> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":3739,"byte_end":3750,"line_start":133,"line_end":133,"column_start":63,"column_end":74,"is_primary":true,"text":[{"text":"        fn write_iter<WI>(&mut self, words: WI) -> Result<(), Self::Error>","highlight_start":63,"highlight_end":74}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeNormal> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":3739,"byte_end":3750,"line_start":133,"line_end":133,"column_start":63,"column_end":74,"is_primary":true,"text":[{"text":"        fn write_iter<WI>(&mut self, words: WI) -> Result<(), Self::Error>","highlight_start":63,"highlight_end":74}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeNormal> as embedded_hal::spi::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs:133:63\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m133\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        fn write_iter<WI>(&mut self, words: WI) -> Result<(), Self::Error>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m133\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write_iter<WI>(&mut self, words: WI) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<Spi<SPI, PINS, TransferModeNormal> as FullDuplex>::Error\u001b[0m\u001b[0m>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m133\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write_iter<WI>(&mut self, words: WI) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<Spi<SPI, PINS, TransferModeNormal> as TryFrom>::Error\u001b[0m\u001b[0m>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m133\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write_iter<WI>(&mut self, words: WI) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<Spi<SPI, PINS, TransferModeNormal> as TryInto>::Error\u001b[0m\u001b[0m>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m133\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write_iter<WI>(&mut self, words: WI) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<Spi<SPI, PINS, TransferModeNormal> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m      and 8 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":4245,"byte_end":4256,"line_start":151,"line_end":151,"column_start":63,"column_end":74,"is_primary":true,"text":[{"text":"        fn write_iter<WI>(&mut self, words: WI) -> Result<(), Self::Error>","highlight_start":63,"highlight_end":74}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":4245,"byte_end":4256,"line_start":151,"line_end":151,"column_start":63,"column_end":74,"is_primary":true,"text":[{"text":"        fn write_iter<WI>(&mut self, words: WI) -> Result<(), Self::Error>","highlight_start":63,"highlight_end":74}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeBidi> as FullDuplex>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":4245,"byte_end":4256,"line_start":151,"line_end":151,"column_start":63,"column_end":74,"is_primary":true,"text":[{"text":"        fn write_iter<WI>(&mut self, words: WI) -> Result<(), Self::Error>","highlight_start":63,"highlight_end":74}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeBidi> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":4245,"byte_end":4256,"line_start":151,"line_end":151,"column_start":63,"column_end":74,"is_primary":true,"text":[{"text":"        fn write_iter<WI>(&mut self, words: WI) -> Result<(), Self::Error>","highlight_start":63,"highlight_end":74}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeBidi> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":4245,"byte_end":4256,"line_start":151,"line_end":151,"column_start":63,"column_end":74,"is_primary":true,"text":[{"text":"        fn write_iter<WI>(&mut self, words: WI) -> Result<(), Self::Error>","highlight_start":63,"highlight_end":74}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeBidi> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":4245,"byte_end":4256,"line_start":151,"line_end":151,"column_start":63,"column_end":74,"is_primary":true,"text":[{"text":"        fn write_iter<WI>(&mut self, words: WI) -> Result<(), Self::Error>","highlight_start":63,"highlight_end":74}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeBidi> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":4245,"byte_end":4256,"line_start":151,"line_end":151,"column_start":63,"column_end":74,"is_primary":true,"text":[{"text":"        fn write_iter<WI>(&mut self, words: WI) -> Result<(), Self::Error>","highlight_start":63,"highlight_end":74}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeBidi> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":4245,"byte_end":4256,"line_start":151,"line_end":151,"column_start":63,"column_end":74,"is_primary":true,"text":[{"text":"        fn write_iter<WI>(&mut self, words: WI) -> Result<(), Self::Error>","highlight_start":63,"highlight_end":74}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeBidi> as embedded_hal::blocking::spi::Transactional>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":4245,"byte_end":4256,"line_start":151,"line_end":151,"column_start":63,"column_end":74,"is_primary":true,"text":[{"text":"        fn write_iter<WI>(&mut self, words: WI) -> Result<(), Self::Error>","highlight_start":63,"highlight_end":74}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeBidi> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":4245,"byte_end":4256,"line_start":151,"line_end":151,"column_start":63,"column_end":74,"is_primary":true,"text":[{"text":"        fn write_iter<WI>(&mut self, words: WI) -> Result<(), Self::Error>","highlight_start":63,"highlight_end":74}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeBidi> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":4245,"byte_end":4256,"line_start":151,"line_end":151,"column_start":63,"column_end":74,"is_primary":true,"text":[{"text":"        fn write_iter<WI>(&mut self, words: WI) -> Result<(), Self::Error>","highlight_start":63,"highlight_end":74}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeBidi> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":4245,"byte_end":4256,"line_start":151,"line_end":151,"column_start":63,"column_end":74,"is_primary":true,"text":[{"text":"        fn write_iter<WI>(&mut self, words: WI) -> Result<(), Self::Error>","highlight_start":63,"highlight_end":74}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeBidi> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs","byte_start":4245,"byte_end":4256,"line_start":151,"line_end":151,"column_start":63,"column_end":74,"is_primary":true,"text":[{"text":"        fn write_iter<WI>(&mut self, words: WI) -> Result<(), Self::Error>","highlight_start":63,"highlight_end":74}],"label":null,"suggested_replacement":"<Spi<SPI, PINS, TransferModeBidi> as embedded_hal::spi::ErrorType>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\spi\\hal_1.rs:151:63\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        fn write_iter<WI>(&mut self, words: WI) -> Result<(), Self::Error>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write_iter<WI>(&mut self, words: WI) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<Spi<SPI, PINS, TransferModeBidi> as FullDuplex>::Error\u001b[0m\u001b[0m>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write_iter<WI>(&mut self, words: WI) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<Spi<SPI, PINS, TransferModeBidi> as TryFrom>::Error\u001b[0m\u001b[0m>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write_iter<WI>(&mut self, words: WI) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<Spi<SPI, PINS, TransferModeBidi> as TryInto>::Error\u001b[0m\u001b[0m>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m151\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        fn write_iter<WI>(&mut self, words: WI) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<Spi<SPI, PINS, TransferModeBidi> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                               \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m      and 8 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\timer\\hal_1.rs","byte_start":777,"byte_end":788,"line_start":29,"line_end":29,"column_start":51,"column_end":62,"is_primary":true,"text":[{"text":"    fn delay_us(&mut self, us: u32) -> Result<(), Self::Error> {","highlight_start":51,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\timer\\hal_1.rs","byte_start":777,"byte_end":788,"line_start":29,"line_end":29,"column_start":51,"column_end":62,"is_primary":true,"text":[{"text":"    fn delay_us(&mut self, us: u32) -> Result<(), Self::Error> {","highlight_start":51,"highlight_end":62}],"label":null,"suggested_replacement":"<timer::delay::Delay<TIM, FREQ> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\timer\\hal_1.rs","byte_start":777,"byte_end":788,"line_start":29,"line_end":29,"column_start":51,"column_end":62,"is_primary":true,"text":[{"text":"    fn delay_us(&mut self, us: u32) -> Result<(), Self::Error> {","highlight_start":51,"highlight_end":62}],"label":null,"suggested_replacement":"<timer::delay::Delay<TIM, FREQ> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\timer\\hal_1.rs","byte_start":777,"byte_end":788,"line_start":29,"line_end":29,"column_start":51,"column_end":62,"is_primary":true,"text":[{"text":"    fn delay_us(&mut self, us: u32) -> Result<(), Self::Error> {","highlight_start":51,"highlight_end":62}],"label":null,"suggested_replacement":"<timer::delay::Delay<TIM, FREQ> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\timer\\hal_1.rs","byte_start":777,"byte_end":788,"line_start":29,"line_end":29,"column_start":51,"column_end":62,"is_primary":true,"text":[{"text":"    fn delay_us(&mut self, us: u32) -> Result<(), Self::Error> {","highlight_start":51,"highlight_end":62}],"label":null,"suggested_replacement":"<timer::delay::Delay<TIM, FREQ> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\timer\\hal_1.rs","byte_start":777,"byte_end":788,"line_start":29,"line_end":29,"column_start":51,"column_end":62,"is_primary":true,"text":[{"text":"    fn delay_us(&mut self, us: u32) -> Result<(), Self::Error> {","highlight_start":51,"highlight_end":62}],"label":null,"suggested_replacement":"<timer::delay::Delay<TIM, FREQ> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\timer\\hal_1.rs","byte_start":777,"byte_end":788,"line_start":29,"line_end":29,"column_start":51,"column_end":62,"is_primary":true,"text":[{"text":"    fn delay_us(&mut self, us: u32) -> Result<(), Self::Error> {","highlight_start":51,"highlight_end":62}],"label":null,"suggested_replacement":"<timer::delay::Delay<TIM, FREQ> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\timer\\hal_1.rs","byte_start":777,"byte_end":788,"line_start":29,"line_end":29,"column_start":51,"column_end":62,"is_primary":true,"text":[{"text":"    fn delay_us(&mut self, us: u32) -> Result<(), Self::Error> {","highlight_start":51,"highlight_end":62}],"label":null,"suggested_replacement":"<timer::delay::Delay<TIM, FREQ> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\timer\\hal_1.rs","byte_start":777,"byte_end":788,"line_start":29,"line_end":29,"column_start":51,"column_end":62,"is_primary":true,"text":[{"text":"    fn delay_us(&mut self, us: u32) -> Result<(), Self::Error> {","highlight_start":51,"highlight_end":62}],"label":null,"suggested_replacement":"<timer::delay::Delay<TIM, FREQ> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\timer\\hal_1.rs","byte_start":777,"byte_end":788,"line_start":29,"line_end":29,"column_start":51,"column_end":62,"is_primary":true,"text":[{"text":"    fn delay_us(&mut self, us: u32) -> Result<(), Self::Error> {","highlight_start":51,"highlight_end":62}],"label":null,"suggested_replacement":"<timer::delay::Delay<TIM, FREQ> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\timer\\hal_1.rs","byte_start":777,"byte_end":788,"line_start":29,"line_end":29,"column_start":51,"column_end":62,"is_primary":true,"text":[{"text":"    fn delay_us(&mut self, us: u32) -> Result<(), Self::Error> {","highlight_start":51,"highlight_end":62}],"label":null,"suggested_replacement":"<timer::delay::Delay<TIM, FREQ> as fugit_timer::Delay>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\timer\\hal_1.rs:29:51\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn delay_us(&mut self, us: u32) -> Result<(), Self::Error> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn delay_us(&mut self, us: u32) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<timer::delay::Delay<TIM, FREQ> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn delay_us(&mut self, us: u32) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<timer::delay::Delay<TIM, FREQ> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn delay_us(&mut self, us: u32) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<timer::delay::Delay<TIM, FREQ> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m29\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn delay_us(&mut self, us: u32) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<timer::delay::Delay<TIM, FREQ> as _embedded_hal_blocking_spi_Transfer>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m     and 6 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"ambiguous associated type","code":{"code":"E0223","explanation":"An attempt was made to retrieve an associated type, but the type was ambiguous.\n\nErroneous code example:\n\n```compile_fail,E0223\ntrait Trait { type X; }\n\nfn main() {\n    let foo: Trait::X;\n}\n```\n\nThe problem here is that we're attempting to take the associated type of `X`\nfrom `Trait`. Unfortunately, the type of `X` is not defined, because it's only\nmade concrete in implementations of the trait. A working version of this code\nmight look like:\n\n```\ntrait Trait { type X; }\n\nstruct Struct;\nimpl Trait for Struct {\n    type X = u32;\n}\n\nfn main() {\n    let foo: <Struct as Trait>::X;\n}\n```\n\nThis syntax specifies that we want the associated type `X` from `Struct`'s\nimplementation of `Trait`.\n\nDue to internal limitations of the current compiler implementation we cannot\nsimply use `Struct::X`.\n"},"level":"error","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\timer\\hal_1.rs","byte_start":897,"byte_end":908,"line_start":34,"line_end":34,"column_start":51,"column_end":62,"is_primary":true,"text":[{"text":"    fn delay_ms(&mut self, ms: u32) -> Result<(), Self::Error> {","highlight_start":51,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"use fully-qualified syntax","code":null,"level":"help","spans":[{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\timer\\hal_1.rs","byte_start":897,"byte_end":908,"line_start":34,"line_end":34,"column_start":51,"column_end":62,"is_primary":true,"text":[{"text":"    fn delay_ms(&mut self, ms: u32) -> Result<(), Self::Error> {","highlight_start":51,"highlight_end":62}],"label":null,"suggested_replacement":"<timer::delay::Delay<TIM, FREQ> as TryFrom>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\timer\\hal_1.rs","byte_start":897,"byte_end":908,"line_start":34,"line_end":34,"column_start":51,"column_end":62,"is_primary":true,"text":[{"text":"    fn delay_ms(&mut self, ms: u32) -> Result<(), Self::Error> {","highlight_start":51,"highlight_end":62}],"label":null,"suggested_replacement":"<timer::delay::Delay<TIM, FREQ> as TryInto>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\timer\\hal_1.rs","byte_start":897,"byte_end":908,"line_start":34,"line_end":34,"column_start":51,"column_end":62,"is_primary":true,"text":[{"text":"    fn delay_ms(&mut self, ms: u32) -> Result<(), Self::Error> {","highlight_start":51,"highlight_end":62}],"label":null,"suggested_replacement":"<timer::delay::Delay<TIM, FREQ> as _embedded_hal_blocking_serial_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\timer\\hal_1.rs","byte_start":897,"byte_end":908,"line_start":34,"line_end":34,"column_start":51,"column_end":62,"is_primary":true,"text":[{"text":"    fn delay_ms(&mut self, ms: u32) -> Result<(), Self::Error> {","highlight_start":51,"highlight_end":62}],"label":null,"suggested_replacement":"<timer::delay::Delay<TIM, FREQ> as _embedded_hal_blocking_spi_Transfer>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\timer\\hal_1.rs","byte_start":897,"byte_end":908,"line_start":34,"line_end":34,"column_start":51,"column_end":62,"is_primary":true,"text":[{"text":"    fn delay_ms(&mut self, ms: u32) -> Result<(), Self::Error> {","highlight_start":51,"highlight_end":62}],"label":null,"suggested_replacement":"<timer::delay::Delay<TIM, FREQ> as _embedded_hal_blocking_spi_Write>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\timer\\hal_1.rs","byte_start":897,"byte_end":908,"line_start":34,"line_end":34,"column_start":51,"column_end":62,"is_primary":true,"text":[{"text":"    fn delay_ms(&mut self, ms: u32) -> Result<(), Self::Error> {","highlight_start":51,"highlight_end":62}],"label":null,"suggested_replacement":"<timer::delay::Delay<TIM, FREQ> as embedded_hal::blocking::spi::WriteIter>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\timer\\hal_1.rs","byte_start":897,"byte_end":908,"line_start":34,"line_end":34,"column_start":51,"column_end":62,"is_primary":true,"text":[{"text":"    fn delay_ms(&mut self, ms: u32) -> Result<(), Self::Error> {","highlight_start":51,"highlight_end":62}],"label":null,"suggested_replacement":"<timer::delay::Delay<TIM, FREQ> as embedded_hal::digital::v2::InputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\timer\\hal_1.rs","byte_start":897,"byte_end":908,"line_start":34,"line_end":34,"column_start":51,"column_end":62,"is_primary":true,"text":[{"text":"    fn delay_ms(&mut self, ms: u32) -> Result<(), Self::Error> {","highlight_start":51,"highlight_end":62}],"label":null,"suggested_replacement":"<timer::delay::Delay<TIM, FREQ> as embedded_hal::digital::v2::OutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\timer\\hal_1.rs","byte_start":897,"byte_end":908,"line_start":34,"line_end":34,"column_start":51,"column_end":62,"is_primary":true,"text":[{"text":"    fn delay_ms(&mut self, ms: u32) -> Result<(), Self::Error> {","highlight_start":51,"highlight_end":62}],"label":null,"suggested_replacement":"<timer::delay::Delay<TIM, FREQ> as embedded_hal::digital::v2::ToggleableOutputPin>::Error","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"C:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\timer\\hal_1.rs","byte_start":897,"byte_end":908,"line_start":34,"line_end":34,"column_start":51,"column_end":62,"is_primary":true,"text":[{"text":"    fn delay_ms(&mut self, ms: u32) -> Result<(), Self::Error> {","highlight_start":51,"highlight_end":62}],"label":null,"suggested_replacement":"<timer::delay::Delay<TIM, FREQ> as fugit_timer::Delay>::Error","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0223]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: ambiguous associated type\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0mC:\\Users\\ctswi\\.cargo\\registry\\src\\index.crates.io-6f17d22bba15001f\\stm32f4xx-hal-0.12.0\\src\\timer\\hal_1.rs:34:51\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    fn delay_ms(&mut self, ms: u32) -> Result<(), Self::Error> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: use fully-qualified syntax\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn delay_ms(&mut self, ms: u32) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<timer::delay::Delay<TIM, FREQ> as TryFrom>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn delay_ms(&mut self, ms: u32) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<timer::delay::Delay<TIM, FREQ> as TryInto>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn delay_ms(&mut self, ms: u32) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<timer::delay::Delay<TIM, FREQ> as _embedded_hal_blocking_serial_Write>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m34\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    fn delay_ms(&mut self, ms: u32) -> Result<(), \u001b[0m\u001b[0m\u001b[38;5;10m<timer::delay::Delay<TIM, FREQ> as _embedded_hal_blocking_spi_Transfer>::Error\u001b[0m\u001b[0m> {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[38;5;10m~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\u001b[0m\n\u001b[0m     and 6 other candidates\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 88 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 88 previous errors\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0223, E0432, E0433.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mSome errors have detailed explanations: E0223, E0432, E0433.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0223`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about an error, try `rustc --explain E0223`.\u001b[0m\n"}
